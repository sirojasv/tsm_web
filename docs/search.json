[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "",
    "text": "Gran parte de la investigaci√≥n contempor√°nea centrada en el dise√±o, implementaci√≥n y evaluaci√≥n de intervenciones sociales descansa en el uso de m√©todos cuantitativos. Las exigencias de los contextos de profesionales actuales en que se conducen intervenciones sociales requieren el desarrollo de un manejo cada vez mayor de metodolog√≠as de an√°lisis cuantitativo de datos. El curso se centra tanto en el dise√±o de investigaci√≥n cuantitativa como en los m√©todos descriptivos, inferenciales y correlacionales de an√°lisis. Tambi√©n pretende introducir al uso y aplicaciones de t√©cnicas de an√°lisis de regresi√≥n lineal m√∫ltiple y log√≠stica binaria.\nA lo largo del curso se desarrollan competencias b√°sicas e intermedias de uso del programa estad√≠stico R."
  },
  {
    "objectID": "index.html#descripci√≥n-del-curso",
    "href": "index.html#descripci√≥n-del-curso",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "",
    "text": "Gran parte de la investigaci√≥n contempor√°nea centrada en el dise√±o, implementaci√≥n y evaluaci√≥n de intervenciones sociales descansa en el uso de m√©todos cuantitativos. Las exigencias de los contextos de profesionales actuales en que se conducen intervenciones sociales requieren el desarrollo de un manejo cada vez mayor de metodolog√≠as de an√°lisis cuantitativo de datos. El curso se centra tanto en el dise√±o de investigaci√≥n cuantitativa como en los m√©todos descriptivos, inferenciales y correlacionales de an√°lisis. Tambi√©n pretende introducir al uso y aplicaciones de t√©cnicas de an√°lisis de regresi√≥n lineal m√∫ltiple y log√≠stica binaria.\nA lo largo del curso se desarrollan competencias b√°sicas e intermedias de uso del programa estad√≠stico R."
  },
  {
    "objectID": "index.html#objetivos-de-aprendizaje",
    "href": "index.html#objetivos-de-aprendizaje",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "Objetivos de aprendizaje",
    "text": "Objetivos de aprendizaje\n\nIdentificar tipos de problemas de an√°lisis de datos cuantitativos.\nArticular un dise√±o de investigaci√≥n cuantitativo a partir de sus componentes.\nTomar decisiones estrat√©gicas y fundadas del tipo de an√°lisis a realizar para determinado tipo de datos.\nDemostrar habilidades de an√°lisis hipot√©tico-deductivo.\nReportar resultados del an√°lisis de datos cuantitativos"
  },
  {
    "objectID": "index.html#calendario-de-clases",
    "href": "index.html#calendario-de-clases",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "Calendario de clases",
    "text": "Calendario de clases\nLa programaci√≥n de las clases es la siguiente:\n\n\n\n\n\n\n\n\n\n\n\n\nFecha\nContenidos\nPresentaci√≥n\nNotas\nC√≥digo\n\n\n\n\nSesi√≥n 0\n15 de agosto\nInstalaci√≥n de R y RStudio\nüìí\n\n\n\n\nSesi√≥n 1\n23 de agosto\nIntroducci√≥n a R\nüìí\nüíª\n  \n\n\nSesi√≥n 2\n30 de agosto\nTipos y estructuras de datos\n\n\n\n\n\nSesi√≥n 3\n6 de septiembre\nIntroducci√≥n a tidyverse\nÔ∏è\n\n\n\n\nSesi√≥n 4\n13 de septiembre\nEstad√≠stica descriptiva\n\n\n\n\n\nSesi√≥n 5\n20 de septiembre\nTablas de contingencia\n\n\n\n\n\nSesi√≥n 6\n18 de octubre\nIntervalos de confianza\n\n\n\n\n\nSesi√≥n 7\n8 de noviembre\nPrueba œá¬≤\n\n\n\n\n\nSesi√≥n 8\n22 de noviembre\nRegresi√≥n lineal"
  },
  {
    "objectID": "index.html#metodolog√≠a-del-curso",
    "href": "index.html#metodolog√≠a-del-curso",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "Metodolog√≠a del curso",
    "text": "Metodolog√≠a del curso\nEl curso es de car√°cter pr√°ctico, por lo que tiene el prop√≥sito de ense√±ar a programar a trav√©s de proyectos concretos. Adem√°s, se contemplan las siguientes instancias:\n\nClases expositivas.\nDesarrollo de ejercicios en clases.\nTalleres de aplicaci√≥n en R."
  },
  {
    "objectID": "index.html#evaluaciones",
    "href": "index.html#evaluaciones",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "Evaluaciones",
    "text": "Evaluaciones\nEl curso tendr√° 4 evaluaciones ponderadas y organizadas de la siguiente manera:\n\n\n\n\n\n\n\n\n\n\n\n\n\nPublicaci√≥n\nEntrega\nCurso\nPonderaci√≥n\nEvaluaci√≥n\nSoluci√≥n\n\n\n\n\nTrabajo 1\n30 de agosto\n6 de septiembre\nMetodolog√≠a Cuantitativa\n50%\n\n\n\n\nTrabajo 2\n20 de septiembre\n27 de septiembre\nMetodolog√≠a Cuantitativa\n50%\n\n\n\n\nTrabajo 3\n8 de noviembre\n15 de noviembre\nAn√°lisis de Regresi√≥n M√∫ltiple\n50%\n\n\n\n\nTrabajo 4\n29 de noviembre\n6 de diciembre\nAn√°lisis de Regresi√≥n M√∫ltiple\n50%\n\n\n\n\n\nTodas las evaluaciones se deben enviar a trav√©s de la plataforma Canvas."
  },
  {
    "objectID": "index.html#integridad-acad√©mica",
    "href": "index.html#integridad-acad√©mica",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "Integridad acad√©mica",
    "text": "Integridad acad√©mica\nLas faltas a la integridad acad√©mica son acciones de plagio, omitir informaci√≥n, fraude y/o adulteraci√≥n de documentaci√≥n cometidas de forma individual o colectiva, que atenten contra los valores de honestidad, veracidad, confianza, justicia, respeto y responsabilidad, dentro del marco de actividades acad√©micas.\nLos casos de falta a la integridad acad√©mica ocurridos durante la aplicaci√≥n de alguna evaluaci√≥n en este curso ser√°n sancionados autom√°ticamente con un 1.0. Adicionalmente, y conforme a la Pol√≠tica de Integridad Acad√©mica de la Universidad, toda falta tambi√©n ser√° derivada al Comit√© de Integridad Acad√©mica de la Facultad de Ciencias Sociales. Este √≥rgano definir√° la gravedad de la falta (leve, moderada o grave) y las consecuencias de dicha falta, con foco formativo. Una vez finalizado el proceso, se ingresar√° el caso en el Registro de Faltas a la Integridad Acad√©mica, y se realizar√° seguimiento del caso. En caso de que la o el estudiante no aceptase las consecuencias establecidas por la comisi√≥n, puede solicitar la revisi√≥n de su caso a la misma.\nUna vez realizada la revisi√≥n, y si a√∫n el o la estudiante no desea asumir las consecuencias planteadas por la comisi√≥n, podr√° apelar a Secretar√≠a General de la Universidad. Los detalles de la pol√≠tica y la gesti√≥n de faltas a la honestidad acad√©mica se encuentran aqu√≠: https://integridadacademica.uc.cl"
  },
  {
    "objectID": "index.html#contribuciones-y-agradecimientos",
    "href": "index.html#contribuciones-y-agradecimientos",
    "title": "Metodolog√≠a Cuantitativa y An√°lisis de Regresi√≥n M√∫ltiple",
    "section": "Contribuciones y agradecimientos",
    "text": "Contribuciones y agradecimientos\nEsta p√°gina usa como inspiraci√≥n el trabajo de la profesora Mine √áetinkaya-Rundel, Directora de Estudios de Grado del Departamento de Ciencias Estad√≠sticas de la Universidad de Duke.\n\nEn caso de tener inter√©s en ese curso, la direcci√≥n es: STA 210"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html",
    "title": "Introducci√≥n a R",
    "section": "",
    "text": "I. ¬øQu√© es R?\nII. ¬øPor qu√© usar R?\nIII. Iniciando R\nIV. Bases de R\nV. Comentando Scripts"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#contenidos",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#contenidos",
    "title": "Introducci√≥n a R",
    "section": "Contenidos",
    "text": "Contenidos\nI. ¬øQu√© es R?\nII. ¬øPor qu√© usar R?\nIII. Iniciando R\nIV. Bases de R\nV. Comentando Scripts"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section",
    "title": "Introducci√≥n a R",
    "section": "",
    "text": "I. ¬øQu√© es R?"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#qu√©-es-r-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#qu√©-es-r-1",
    "title": "Introducci√≥n a R",
    "section": "¬øQu√© es R? (1)",
    "text": "¬øQu√© es R? (1)\n\n\n\nR es un lenguaje de programaci√≥n para la computaci√≥n estad√≠stica y la visualizaci√≥n creado por Robert Gentleman y Ross Ihaka, profesores de estad√≠stica de la Universidad de Auckland en Nueva Zelanda.\nTiene la ventaja de ser gratuito y libre.\nUna forma de contribuir al desarrollo de R es mediante la creaci√≥n de un paquete.\nImplica escribir c√≥digo, que es la manera que tenemos de comunicarnos con el lenguaje.\nLo usaremos a trav√©s del IDE RStudio."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-1",
    "title": "Introducci√≥n a R",
    "section": "",
    "text": "II. ¬øPor qu√© usar R?"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#por-qu√©-usar-r-caracteristicas-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#por-qu√©-usar-r-caracteristicas-1",
    "title": "Introducci√≥n a R",
    "section": "¬øPor qu√© usar R? Caracteristicas (1)",
    "text": "¬øPor qu√© usar R? Caracteristicas (1)\n\nGratuito. A diferencia de otros softwares de ciencias sociales (v.g. SPSS) o el propio Excel.\nLibre. Permite que la comunidad introduzca nuevas funciones al software.\nPotencia. Permite articular de mejor forma el procesamiento, an√°lisis, visualizaci√≥n y reporter√≠a de datos.\nCampo de aplicaci√≥n. Estad√≠stica, negocios, ciencia de datos, ciencias naturales, etc.\n\nPero tambi√©n tiene desventajas ü•∫\n\nCurva de aprendizaje empinada.\nNo est√° pensado para ejecutar comandos por interfaz gr√°fica, lo que puede ser dif√≠cil para algunas personas."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#por-qu√©-usar-r-crecimiento-2",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#por-qu√©-usar-r-crecimiento-2",
    "title": "Introducci√≥n a R",
    "section": "¬øPor qu√© usar R? Crecimiento (2)",
    "text": "¬øPor qu√© usar R? Crecimiento (2)\nEl uso de R ha aumentado durante los √∫ltimos 15 a√±os. Este fen√≥meno se ha replicado en las ciencias sociales."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-2",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-2",
    "title": "Introducci√≥n a R",
    "section": "",
    "text": "III. Iniciando R"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#rstudio",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#rstudio",
    "title": "Introducci√≥n a R",
    "section": "RStudio",
    "text": "RStudio\nAl abrir RStudio se encontrar√°n con tres paneles:\n\nLa Consola marcada por el recuadro color lila\nEl Enviroment o ambiente de trabajo en un color salm√≥n\nLas Utilidades en color verde"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#comenzar-un-script",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#comenzar-un-script",
    "title": "Introducci√≥n a R",
    "section": "Comenzar un script",
    "text": "Comenzar un script\nLos comandos que ejecutaremos directamente en la consola no mantienen un registro, por lo que usaremos un Script de R para conservar el c√≥digo. Para iniciar un Script tenemos dos alternativas:\n\nSeleccionar File ‚Üí New File ‚Üí R Script\nUsar el atajo de teclado CTRL/CMD + SHIFT + N\n\nLa forma m√°s sencilla de utilizar R ser√≠a como una calculadora:\n\n# Esto es una suma\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#atajos-relevantes-para-correr-scripts",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#atajos-relevantes-para-correr-scripts",
    "title": "Introducci√≥n a R",
    "section": "Atajos relevantes para correr scripts",
    "text": "Atajos relevantes para correr scripts\n\nCTRL/CMD + ENTER ‚Üí Ejecuta la l√≠nea que tienen seleccionada en el curso\nCTRL/CMD + SHIFT + ENTER ‚Üí Ejecuta todo el c√≥digo\nCTR/CMD + L ‚Üí Limpia toda la consola de resultados de R\nCTRL/CMD + S ‚Üí Guarda el script. Si este no tiene nombre, primero pedir√° guardarlo en un directorio y asignarle nombre"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-3",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-3",
    "title": "Introducci√≥n a R",
    "section": "",
    "text": "IV. Bases de R"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#c√°lculos-en-r",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#c√°lculos-en-r",
    "title": "Introducci√≥n a R",
    "section": "C√°lculos en R",
    "text": "C√°lculos en R\nEs posible usar R como una calculadora. Las operaciones m√°s utilizadas son las siguientes\n\n\n\n\nOperaci√≥n\n\n\n\n\n+\nSuma\n\n\n-\nResta\n\n\n*\nMultiplicaci√≥n\n\n\n/\nDivisi√≥n\n\n\n^\nPotencia\n\n\nsqrt\nRa√≠z cuadrada\n\n\nlog()\nLogaritmo base"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#objetos-en-r",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#objetos-en-r",
    "title": "Introducci√≥n a R",
    "section": "Objetos en R",
    "text": "Objetos en R\n\nEn R podemos crear objetos que guarden informaci√≥n o resultados. Para ello, se escribe el nombre y se les asigna los valores con el operador &lt;-.\nLos nombres permiten representar resultados de manera m√°s f√°cil. Ejemplo:\n\nIngresamos tres notas y las dividimos por 3. Este resultado queda guardado en el objeto llamado ‚Äúpromedio‚Äù.\nLuego, si queremos ver el resultado, basta con llamar al objeto promedio.\nSi el nombre del objeto ya existe, se sobreescribir√° su contenido.\n\n\n\n# Guardamos esta operaci√≥n matem√°tica en un objeto llamado \"promedio\"\n\npromedio &lt;- (5.5  + 3.8 + 6.1) / 3"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#nombrar-objetos",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#nombrar-objetos",
    "title": "Introducci√≥n a R",
    "section": "Nombrar objetos",
    "text": "Nombrar objetos\n\nEvite caracteres especiales como tildes, √±, espacios, etc.\nConsistencia en los nombres de variables. Puede usar nomenclaturas como Snake Case donde los nombres se escriben en el formato ‚Äúnombre_objeto‚Äù o Camel Case que sigue el est√°ndar ‚ÄúNombreObjeto‚Äù.\nRecordar que R es sensible a may√∫sculas y min√∫sculas. En el ejemplo anterior, definimos el objeto promedio. Si escribi√©ramos Promedio el software no lo reconocer√°."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#estructuras-de-datos",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#estructuras-de-datos",
    "title": "Introducci√≥n a R",
    "section": "Estructuras de datos",
    "text": "Estructuras de datos\n\nR cuenta con clases y tipos de datos definidos de antemano, los cuales dependen de la informaci√≥n que contengan en su interior. Los comandos class y typeof sirven para preguntar el tipo de cada elemento.\nEn la siguiente tabla se muestran algunos de las clases m√°s frecuentes en R.\n\n\n\n\n\n\n\n\n\n\nTipo\nDescripci√≥n\nEjemplo\n\n\n\n\ninteger\nN√∫meros enteros\n-1, 0, 1\n\n\nnumeric\nN√∫meros reales\n-0.5, 1/2, 1\n\n\ncharacter\nTexto/String\n‚ÄúErwin‚Äù, ‚ÄúArmin‚Äù, ‚ÄúSasha‚Äù, ‚ÄúTitanes‚Äù\n\n\nfactor\nDatos categ√≥ricos\n‚ÄúTrabajo Social [1]‚Äù, ‚ÄúOtra carrera [2]‚Äù\n\n\nhaven_labelled\nValores num√©ricos con etiquetas asociadas\n1 = ‚ÄúMuy en desacuerdo‚Äù; 2 = ‚ÄúEn desacuerdo‚Äù; 3 ‚ÄúNi de acuerdo ni en desacuerdo‚Äù; 4 = ‚ÄúDe acuerdo‚Äù; 5 ‚ÄúMuy de acuerdo‚Äù\n\n\nlogical\nVerdadero o falso\n‚ÄúTRUE‚Äù, ‚ÄúFALSE‚Äù"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-1",
    "title": "Introducci√≥n a R",
    "section": "Vectores (1)",
    "text": "Vectores (1)\nLos vectores son ordenamientos unidimensionales que solo pueden contener un tipo de dato. Se definen con el comando c().\nLos vectores tienen valores y adem√°s una posici√≥n (index) asociada a cada valor. Esta comienza desde el n√∫mero 1 en adelante.\n\n\nv_numerico &lt;- c(1, 3, 5, 7, 9) # Vector que solo contiene n√∫meros\nclass(v_numerico)\n\n[1] \"numeric\""
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-2",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-2",
    "title": "Introducci√≥n a R",
    "section": "Vectores (2)",
    "text": "Vectores (2)\n\nUn vector solamente puede contener caracteres o solamente puede contener n√∫meros. En los casos en que se produzca una mezcla, R realizar√° una transformaci√≥n en los datos para que contengan solo un tipo de dato.\n\nCon el comando class() y typeof() se puede obtener informaci√≥n sobre los objetos\n\nclass() nos dir√° de qu√© clase es el objeto. Para este curso, de preferencia usaremos este.\ntypeof() nos dir√° el modo de almacenamiento de ese objeto.\n\n\nclass(v_numerico)\n\n[1] \"numeric\"\n\ntypeof(v_numerico)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-3",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-3",
    "title": "Introducci√≥n a R",
    "section": "Vectores (3)",
    "text": "Vectores (3)\n\nSi un vector contiene m√°s de un tipo de dato, el programa forzar√° a que todos los datos sean del mismo tipo. Este proceso se conoce como coerci√≥n.\nNoten que si el texto est√° entre comillas, el programa lo reconocer√° como un caracter.\n\n\nejemplo_character &lt;- \"Soy un character inocente\"\n\nclass(ejemplo_character)\n\n[1] \"character\"\n\ntypeof(ejemplo_character)\n\n[1] \"character\"\n\nv_char &lt;- c(40, \"50 a√±os\", 33, \"33\") # Las comillas indican que es texto\n\n\n# ¬øY si comprobamos la clase del √∫ltio vector que generamos?\n\n# ¬°Pregunta! ¬øPor qu√© es de clase character?\nclass(v_char)\n\n[1] \"character\"\n\ntypeof(v_char)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-4",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-4",
    "title": "Introducci√≥n a R",
    "section": "Vectores (4)",
    "text": "Vectores (4)\nEs posible acceder a cualquier elemento de un vector a trav√©s de su posici√≥n usando la notaci√≥n []1.\n\n\n\nRespondamos algunas preguntas:\n\n¬øDe qu√© tipo es este vector?\n¬øCu√°ntos elementos o qu√© largo tiene este vector?\n¬øC√≥mo puedo acceder al primer elemento del vector?\n¬øC√≥mo puedo acceder a los dos primeros elementos del vector?\n¬øC√≥mo puedo acceder a la √∫ltima posici√≥n, sin saber su largo a priori?\n\nNota: si tienen problemas para escribirlos con el teclado, pueden usar ALT + 91 para [ y ALT + 93 para ]. Usualmente con solo escribir uno R deber√≠a autocompletar."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-5",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#vectores-5",
    "title": "Introducci√≥n a R",
    "section": "Vectores (5)",
    "text": "Vectores (5)\n\ndespedida &lt;- c(\"Eren\", \"Mikasa\", \"Armin\", \"Gracias por todo\",\n              \"Casi terminas :/\", \"Este 2023\")\n\nclass(despedida)\n\n[1] \"character\"\n\nlength(despedida)\n\n[1] 6\n\ndespedida[1]\n\n[1] \"Eren\"\n\ndespedida[1:2]\n\n[1] \"Eren\"   \"Mikasa\"\n\ndespedida[length(despedida)] # length es una funci√≥n de R que entrega el largo de un vector\n\n[1] \"Este 2023\""
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#matrices-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#matrices-1",
    "title": "Introducci√≥n a R",
    "section": "Matrices (1)",
    "text": "Matrices (1)\n\nLas matrices son estructuras bidimensionales, pues tienen filas y columnas, pero donde solo puede existir un tipo de dato. Se crean con el comando matrix(). Este comando sigue la siguiente estructura:\n\nmatrix(vector, nrow = n, ncol = m, byrow = FALSE)\n\nPrimero se especifican los datos de la matriz.\nLuego se especifica el n√∫mero de filas.\nLuego se especifica el n√∫mero de columnas.\nEl argumento byrow puede tomar dos valores. Si es FALSE, la matriz se llenar√° por columnas, es decir, completar√° una columna y luego continuar√° con los valores. Si el argumento es TRUE, se llenar√° por filas, es decir, completar√° una fila y luego pasar√° a la siguiente. El valor por defecto siempre es FALSE para esta funci√≥n."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#matrices-2",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#matrices-2",
    "title": "Introducci√≥n a R",
    "section": "Matrices (2)",
    "text": "Matrices (2)\nEjemplo de llenado por columnas\n\nmatriz_1 &lt;- matrix(1:9, ncol = 3) # Llenado por columnas\nmatriz_1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nEjemplo de llenado por filas\n\nmatriz_2 &lt;- matrix(1:9, ncol = 3, byrow = TRUE) # Llenado por filas\nmatriz_2\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos",
    "title": "Introducci√≥n a R",
    "section": "Acceder a elementos",
    "text": "Acceder a elementos\n\nEn R las matrices siempre siguen el orden (filas, columnas). Con esta l√≥gica se puede seleccionar sus elementos: mi_matriz[i, j] ~ i = filas, j = columnas.\n\nmi_matriz[i, ]: selecciona la fila i-√©sima de la matriz.\nmi_matriz[, j]: selecciona la columna j-√©sima de la matriz.\nmi_matriz[i, j]: selecciona el j-√©simo elemento de la i-√©sima fila\n\n\nRealicemos un ejemplo con la matriz_2\n\nmatriz_2[1, 1] # Estoy seleccionando la fila 1 columna 1\n\n[1] 1\n\nmatriz_2[2, 1] # Estoy seleccionando la fila 2 columna 1\n\n[1] 4\n\nmatriz_2[1, ] # Estoy seleccionando a toda la fila 1\n\n[1] 1 2 3\n\nmatriz_2[3, ] # Estoy seleccionando a toda la fila 3\n\n[1] 7 8 9\n\nmatriz_2[, 1] # Estoy seleccionando a toda la columna 1\n\n[1] 1 4 7"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#dataframe-y-tibble-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#dataframe-y-tibble-1",
    "title": "Introducci√≥n a R",
    "section": "Dataframe y tibble (1)",
    "text": "Dataframe y tibble (1)\nEn R los dataframe son arreglos de datos bidimensionales (filas y columnas), pero que permiten distintos tipos de datos.\nEs el caso usual de datos estructurados que se ven en los cursos de an√°lisis de datos: las filas representan observaciones y las columnas variables.\nLos tibbles son muy similares a los dataframe, pero con mejoras de calidad de vida. La funci√≥n proviene del paquete tidyverse.\nLos dataframes se generan a trav√©s de la funci√≥n data.frame(), mientras que los tibbles con tibble()\nPara trabajar con tibbles, requeriremos un paso previo antes üòÆ"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#instalaci√≥n-de-paquetes",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#instalaci√≥n-de-paquetes",
    "title": "Introducci√≥n a R",
    "section": "Instalaci√≥n de paquetes",
    "text": "Instalaci√≥n de paquetes\n\nLos paquetes permiten agregar funciones adicionales a R. Para su instalaci√≥n, debemos usar el comando install.packages(\"nombrepaquete\").\nSe debe tener mucho cuidado con especificar de manera correcta el comando, o arrojar√° error.\nPara utilizar el paquete ya instalado, en la sesi√≥n actual, se debe utilizar el comando library(\"nombrepaquete\").\nPrueben instalando y llamando el paquete tidyverse.\n\n\ninstall.packages(\"tidyverse\")\n\n\n# O un c√≥digo m√°s elegante, donde se instala solo si no lo tiene\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.2     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.0\n‚úî ggplot2   3.4.2     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n# Cuando el paquete ya est√° instalado, se debe ejecutar library()\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#dataframe-y-tibble-2",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#dataframe-y-tibble-2",
    "title": "Introducci√≥n a R",
    "section": "Dataframe y tibble (2)",
    "text": "Dataframe y tibble (2)\n\nEn los tibbles y dataframes uno tambi√©n puede seleccionar directamente filas o columnas. Para ello, existen dos opciones:\nUsar la notaci√≥n de $ para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de [[]] para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de matrices [i, j] para acceder a filas y columnas.\n\n\nnombre_base$nombre_variable\nnombre_base[i, j]\nnombre_base[[]]"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#generando-un-tibble-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#generando-un-tibble-1",
    "title": "Introducci√≥n a R",
    "section": "Generando un tibble (1)",
    "text": "Generando un tibble (1)\nPara este ejemplo crearemos tres vectores y luego los guardaremos como un tibble.\n\nnombre &lt;- c(\"Constanza\", \"Sofia\", \"Gonzalo\")\ncarrera &lt;- c(\"Ingenier√≠a\", \"Administraci√≥n\", \"Arqueolog√≠a\")\ngen &lt;- c(2013, 2018, 2023)\n\n\n# Generando una base de datos con comando data.frame\ndata_estudiantes_df &lt;- data.frame(nombre, carrera, gen)\n\ndata_estudiantes_df\n\n     nombre        carrera  gen\n1 Constanza     Ingenier√≠a 2013\n2     Sofia Administraci√≥n 2018\n3   Gonzalo    Arqueolog√≠a 2023\n\n# Generando una base de datos con comando tibble\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\n# Con este c√≥digo el programa instalar√° el paquete\n# solo si no lo tiene\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#generando-un-tibble-2",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#generando-un-tibble-2",
    "title": "Introducci√≥n a R",
    "section": "Generando un tibble (2)",
    "text": "Generando un tibble (2)\n\ndata_estudiantes_tb &lt;- tibble(nombre, carrera, gen)\n\ndata_estudiantes_tb\n\n# A tibble: 3 √ó 3\n  nombre    carrera          gen\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Constanza Ingenier√≠a      2013\n2 Sofia     Administraci√≥n  2018\n3 Gonzalo   Arqueolog√≠a     2023\n\n# Con el comando View() con la primera en may√∫scula, ver√°n este tibble en RStudio.\n\nView(data_estudiantes_tb)"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-1",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-1",
    "title": "Introducci√≥n a R",
    "section": "Acceder a elementos del tibble (1)",
    "text": "Acceder a elementos del tibble (1)\n\ndata_estudiantes_tb$nombre # accedemos a la columna nombre con $. Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[\"nombre\"] # accedemos a la columna nombre con []. Esto devuelve un tibble\n\n# A tibble: 3 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n3 Gonzalo  \n\ndata_estudiantes_tb[[\"nombre\"]] # accedemos a la columna nombre con[[]] Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[[1]] # accedemos a la columna nombre con notaci√≥n por posici√≥n [[]]\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\""
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-2",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-2",
    "title": "Introducci√≥n a R",
    "section": "Acceder a elementos del tibble (2)",
    "text": "Acceder a elementos del tibble (2)\n\ndata_estudiantes_tb[1, \"nombre\"] # accedemos a la fila 1 de la columna nombre\n\n# A tibble: 1 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n\ndata_estudiantes_tb[1:2, \"nombre\"] # accedemos a la fila 1 y 2 de la columna nombre\n\n# A tibble: 2 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n\ndata_estudiantes_tb[[3, 1]] # Accedemos a la columna 3, fila 1\n\n[1] \"Gonzalo\"\n\ndata_estudiantes_tb[1,] # Accedemos a toda la fila 1\n\n# A tibble: 1 √ó 3\n  nombre    carrera      gen\n  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;\n1 Constanza Ingenier√≠a  2013\n\ndata_estudiantes_tb[1,3] # Accedemos a la fila 1 columna 3\n\n# A tibble: 1 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-3",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-3",
    "title": "Introducci√≥n a R",
    "section": "Acceder a elementos del tibble (3)",
    "text": "Acceder a elementos del tibble (3)\nAcceder de manera negativa o excluyendo elementos\n\ndata_estudiantes_tb[, -c(1)] # accedemos a todas las columnas menos nombre, por posici√≥n\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n\ndata_estudiantes_tb[, -c(1:2)] # accedemos a todas las columnas menos la 1 y la 2\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023\n\ndata_estudiantes_tb[, names(data_estudiantes_tb) != \"nombre\"] # accedemos a todas las columnas menos nombre\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-4",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#acceder-a-elementos-del-tibble-4",
    "title": "Introducci√≥n a R",
    "section": "Acceder a elementos del tibble (4)",
    "text": "Acceder a elementos del tibble (4)\nAcceder de manera negativa o excluyendo elementos\n\ndata_estudiantes_tb[, !names(data_estudiantes_tb) %in% c(\"nombre\", \"carrera\")]\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023"
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#seccionar-un-script",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#seccionar-un-script",
    "title": "Introducci√≥n a R",
    "section": "Seccionar un script",
    "text": "Seccionar un script\nSe puede establecer un orden de t√≠tulos y subt√≠tulos que ordenen el script mediante el siguiente esquema:\n\n# y cuatro guiones medios indican una secci√≥n.\n## y cuatro guiones medios indican una subsecci√≥n anidada a la secci√≥n.\n### y cuatro guiones medios indican una sub-subsecci√≥n.\n\n\n# Proceso 1 ----\n\n## Subproceso 1.1 ----\n\n### Sub-subproceso 1.1.1 ----\n\nPara ver la barra de navegaci√≥n utilizamos el atajo CTRL/CMD + SHIFT + O."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#guardar-un-script",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#guardar-un-script",
    "title": "Introducci√≥n a R",
    "section": "Guardar un script",
    "text": "Guardar un script\n\nSi queremos guardar este script, tenemos tres alternativas:\n\nSeleccionar el √≠cono de disquette que est√° sobre el script.\nIr a File ‚Üí Save.\nUsar el atajo CTRL/CMD + S.\n\nPor √∫ltimo, tener en cuenta que RStudio cuenta con autocompletado y un diagn√≥stico de errores (aparecer√° un √≠cono con una marca roja en forma de ‚Äúx‚Äù en la l√≠nea donde hay problemas)."
  },
  {
    "objectID": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-4",
    "href": "slides/01_clase-1/Clase_1_Presentaci√≥n.html#section-4",
    "title": "Introducci√≥n a R",
    "section": "",
    "text": "¬°Gracias!  https://sirojasv.github.io/tsm_web/\n\n\n\n\n\nMetodolog√≠a Cuantitativa - 2023"
  },
  {
    "objectID": "licenses.html",
    "href": "licenses.html",
    "title": "Licencia",
    "section": "",
    "text": "via GIPHY"
  },
  {
    "objectID": "course-contact.html",
    "href": "course-contact.html",
    "title": "Contacto",
    "section": "",
    "text": "Las presentaciones relativas a R y las evaluaciones estar√°n en esta plataforma y en Canvas. Los videos de las clases solo estar√°n disponibles en Canvas.\nTendremos dos v√≠as de comunicaci√≥n:\n\nForos: podr√°n realizar consultas directamente desde la plataforma Canvas o en esta p√°gina web. Para publicar en esta p√°gina deben crearse una cuenta en https://github.com/\nContacto v√≠a correo: pueden hacer dudas o solicitar un horario de atenci√≥n a sirojas1@uc.cl con copia a daleal@uc.cl ."
  },
  {
    "objectID": "class/header_clase_1.html",
    "href": "class/header_clase_1.html",
    "title": "Clase 1",
    "section": "",
    "text": "Ideas m√°s importantes\n\n\n\n\nConcepto de ‚Äúobjeto‚Äù en R\nEstructuras de datos: vectores, matrices, dataframes\nInstalaci√≥n de librer√≠as o paquetes\nBuenas pr√°cticas para comentar c√≥digo"
  },
  {
    "objectID": "class/header_clase_1.html#presentaci√≥n-de-la-clase",
    "href": "class/header_clase_1.html#presentaci√≥n-de-la-clase",
    "title": "Clase 1",
    "section": "Presentaci√≥n de la clase",
    "text": "Presentaci√≥n de la clase\n\n\nDescargar presentaci√≥n\n\nVuelve a la descripci√≥n del curso ‚èé"
  },
  {
    "objectID": "class/header_clase_0.html",
    "href": "class/header_clase_0.html",
    "title": "Clase 0",
    "section": "",
    "text": "Ideas m√°s importantes\n\n\n\n\nInstalaci√≥n de R y RStudio\nPersonalizaci√≥n de RStudio\nUso de R en la nube"
  },
  {
    "objectID": "class/header_clase_0.html#presentaci√≥n-de-la-clase",
    "href": "class/header_clase_0.html#presentaci√≥n-de-la-clase",
    "title": "Clase 0",
    "section": "Presentaci√≥n de la clase",
    "text": "Presentaci√≥n de la clase\n\n\nDescargar presentaci√≥n"
  },
  {
    "objectID": "class/header_clase_0.html#referencias",
    "href": "class/header_clase_0.html#referencias",
    "title": "Clase 0",
    "section": "Referencias",
    "text": "Referencias\n\nHands-On Programming with R: Write Your Own Functions and Simulations, Appendix: Installing R and RStudio. Click aqu√≠ ‚èé\n\n\nVuelve a la descripci√≥n del curso ‚èé"
  },
  {
    "objectID": "course-bib.html",
    "href": "course-bib.html",
    "title": "Bibliograf√≠a",
    "section": "",
    "text": "Wickham, H., √áetinkaya-Rundel, M & Grolemund, G (2023). R for Data Science (2e). Recurso disponible en https://r4ds.hadley.nz/. Tambi√©n est√° la primera versi√≥n en espa√±ol disponible aqu√≠.\nUrdinez, F., & Cruz, A. (2020). R for Political Data Science: A Practical Guide. CRC Press. Disponible en espa√±ol aqu√≠."
  },
  {
    "objectID": "course-bib.html#aprendizaje-de-r",
    "href": "course-bib.html#aprendizaje-de-r",
    "title": "Bibliograf√≠a",
    "section": "",
    "text": "Wickham, H., √áetinkaya-Rundel, M & Grolemund, G (2023). R for Data Science (2e). Recurso disponible en https://r4ds.hadley.nz/. Tambi√©n est√° la primera versi√≥n en espa√±ol disponible aqu√≠.\nUrdinez, F., & Cruz, A. (2020). R for Political Data Science: A Practical Guide. CRC Press. Disponible en espa√±ol aqu√≠."
  },
  {
    "objectID": "course-bib.html#textos-para-aprendizaje-de-m√©todos-cuantitativos",
    "href": "course-bib.html#textos-para-aprendizaje-de-m√©todos-cuantitativos",
    "title": "Bibliograf√≠a",
    "section": "Textos para aprendizaje de m√©todos cuantitativos",
    "text": "Textos para aprendizaje de m√©todos cuantitativos\nLlaudet, E. Imai, K. (2022). Data Analysis for Social Science: A Friendly and Practical Introduction.\nImai, K., Webb, N. (2018). Quantitative Social Science: An Introduction. Tambi√©n hay una versi√≥n del 2022, llamada ‚ÄúQuantitative Social Science: An Introduction in tidyverse‚Äù, pero no est√° disponible en la universidad."
  },
  {
    "objectID": "course-team.html#profesor",
    "href": "course-team.html#profesor",
    "title": "Equipo docente",
    "section": "Profesor",
    "text": "Profesor\n\nDaniella Leal Valenzuela ¬†¬†¬†  daleal@uc.cl\nDescripci√≥n:\nEl trabajo que desarrollo est√° vinculado con la aplicaci√≥n de metodolog√≠as de investigaci√≥n cuantitativa en el √°rea de encuestas sociales y an√°lisis estad√≠stico. Dentro de mis temas de inter√©s se cuenta el desarrollo de tecnolog√≠as y su impacto en el √°mbito social, as√≠ como temas emergentes asociados con los desaf√≠os del BigData en la sociedad contempor√°nea.\n√Åreas de inter√©s:\nAn√°lisis de Datos, Big Data y Medios Digitales, Encuestas Sociales, Estad√≠stica Social, Metodolog√≠a de la Investigaci√≥n\nEducaci√≥n:\n\nSoci√≥loga, Pontificia Universidad Cat√≥lica de Chile.\nMagister en Sociolog√≠a, Pontificia Universidad Cat√≥lica de Chile.\n\nLa profesora estar√° a cargo de las c√°tedras en las que se impartir√°n los contenidos del curso relativos al dise√±o de investigaci√≥n social, estad√≠stica descriptiva, estad√≠stica inferencial y an√°lisis de regresi√≥n."
  },
  {
    "objectID": "course-team.html#ayudante",
    "href": "course-team.html#ayudante",
    "title": "Equipo docente",
    "section": "Ayudante",
    "text": "Ayudante\n\nSebasti√°n Rojas Vergara  ¬†¬†¬†  sirojas1@uc.cl ¬†¬†¬†  sirojasv\nTrabajo en las etapas del proceso de producci√≥n estad√≠stica en el marco de encuestas sociales a hogares, lo que involucra dise√±o de cuestionarion y su programaci√≥n, validaci√≥n de la informaci√≥n y an√°lisis de datos. Adem√°s, me interesa much√≠simo vincular el mundo de la programaci√≥n con las ciencias sociales.\n√Åreas de inter√©s:\nEncuestas Sociales, Metodolog√≠a de la Investigaci√≥n, Programaci√≥n, Desigualdad, Opini√≥n P√∫blica y Videojuegos.\nEducaci√≥n:\n\nSoci√≥logo, Pontificia Universidad Cat√≥lica de Chile.\nMagister en Sociolog√≠a, Pontificia Universidad Cat√≥lica de Chile.\nDiplomado en Ciencia de Datos, Pontificia Universidad Cat√≥lica de Chile.\nDiplomado Programaci√≥n y Aplicaciones de Python, Pontificia Universidad Cat√≥lica de Chile. (en curso)\n\nEl ayudante estar√° a cargo de la aplicaci√≥n de los contenidos del curso en el software R."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html",
    "title": "Instalaci√≥n R y RStudio",
    "section": "",
    "text": "En esta presentaci√≥n encontrar√°n las instrucciones para instalar los softwares de R y RStudio en el marco de los cursos de Metodolog√≠a Cuantitativa (TSM301) y An√°lisis de Regresi√≥n M√∫ltiple (TMS302).\nAntes de comenzar, les presentamos un video de apenas un minuto del canal de Youtube Fazt Code para que conozcan m√°s sobre este lenguaje de programaci√≥n."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#hola",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#hola",
    "title": "Instalaci√≥n R y RStudio",
    "section": "¬°Holaü´°!",
    "text": "¬°Holaü´°!\n\nEn esta presentaci√≥n encontrar√°n las instrucciones para instalar los softwares de R y RStudio en el marco de los cursos de Metodolog√≠a Cuantitativa (TSM301) y An√°lisis de Regresi√≥n M√∫ltiple (TMS302).\nAntes de comenzar, les presentamos un video de apenas un minuto del canal de Youtube Fazt Code para que conozcan m√°s sobre este lenguaje de programaci√≥n."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#instalaci√≥n-de-r",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#instalaci√≥n-de-r",
    "title": "Instalaci√≥n R y RStudio",
    "section": "Instalaci√≥n de R",
    "text": "Instalaci√≥n de R\n\n\nDeben dirigirse a la p√°gina https://cran.r-project.org/bin/windows/base/\nLuego, ver√°n una pantalla como la que se presenta en esta imagen. Seleccionen ‚ÄúDownload R-4.3.1 for Windows‚Äù.\nUna vez den click, comenzar√° la descarga de un archivo. Deben ejecutarlo y dar ‚Äúsiguiente‚Äù en todas las opciones.\nSi tienen otro sistema operativo, como MacOS, pueden dirigirse ac√°."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#instalar-rstudio-i",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#instalar-rstudio-i",
    "title": "Instalaci√≥n R y RStudio",
    "section": "Instalar RStudio I",
    "text": "Instalar RStudio I\n\n\nDeben ingresar a https://posit.co/download/rstudio-desktop/\nLuego, deben seleccionar la opci√≥n ‚ÄúInstall RStudio‚Äù. Esto iniciar√° una descarga, la que deben ejecutar una vez termine.\nEn caso de que el programa les pregunte por la versi√≥n de R, deben escoger la que est√° instalada en su computadora. Si aparece 32 o 64 bits, siempre seleccionen esta √∫ltima."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#instalar-rstudio-ii",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#instalar-rstudio-ii",
    "title": "Instalaci√≥n R y RStudio",
    "section": "Instalar RStudio II",
    "text": "Instalar RStudio II\n\n\nPara iniciar busquen en la lupa de sus computadores ‚ÄúRStudio‚Äù.\nFinalmente, ver√°n una pantalla como la que se muestra a continuaci√≥n:"
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#personalizaci√≥n-en-rstudio-i",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#personalizaci√≥n-en-rstudio-i",
    "title": "Instalaci√≥n R y RStudio",
    "section": "Personalizaci√≥n en RStudio I",
    "text": "Personalizaci√≥n en RStudio I\n\n\nTemas: Si quieren cambiar los colores del software deben realizar lo siguiente en el men√∫ superior de RStudio: Tools ‚Üí Global Options ‚Üí Appearance ‚Üí Editor Theme. All√≠ encontrar√°n varias opciones para escoger de acuerdo con su preferencia."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#personalizaci√≥n-en-rstudio-ii",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#personalizaci√≥n-en-rstudio-ii",
    "title": "Instalaci√≥n R y RStudio",
    "section": "Personalizaci√≥n en RStudio II",
    "text": "Personalizaci√≥n en RStudio II\n\nAhora veremos algunos ajustes opcionales en RStudio. ¬°Les recomendamos que las activen para que les sea m√°s f√°cil el trabajo!\n\n\n\n\nAutoajuste: Tools ‚Üí Global Options ‚Üí Code ‚Üí Editing ‚Üí Activen opci√≥n \"Soft-wrap R source files\". Con esta opci√≥n el texto se ajustar√° autom√°ticamente al ancho de su ventana\n\n\n\n\n\nPar√©ntesis arco√≠ris: Tools ‚Üí Global Options ‚Üí Code ‚Üí Display ‚Üí Activen opci√≥n \"use rainbow parentheses\". En R estaremos usando par√©ntesis para llamar las funciones. Esta opci√≥n facilitar√° la visualizaci√≥n de los par√©ntesis y su pareo. M√°s informaci√≥n veremos en clases!"
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#correr-r-en-la-nube",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#correr-r-en-la-nube",
    "title": "Instalaci√≥n R y RStudio",
    "section": "Correr R en la nube",
    "text": "Correr R en la nube\n\nPara este curso les recomendamos completamente tener instalado R y RStudio en su computador. Sin embargo, por diferentes razones pueden necesitar utilizar R desde la nube. En las siguientes diapositivas se presentan dos opciones:\n\nRStudio Cloud\nGoogle Colab"
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#rstudio-cloud",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#rstudio-cloud",
    "title": "Instalaci√≥n R y RStudio",
    "section": "RStudio Cloud",
    "text": "RStudio Cloud\n\n\nDeben crearse una cuenta en https://login.rstudio.cloud/login.\nLuego les preguntar√° hacia d√≥nde quieren dirigirse. Deben seleccionar ‚ÄúPosit Cloud‚Äù.\nEn el men√∫ superior derecho, hacer click donde dice New Proyect ‚Üí New RStudio Proyect\". Luego, se les generar√° un entorno virtual id√©ntico a que si instalaran RStudio."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#google-colab",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#google-colab",
    "title": "Instalaci√≥n R y RStudio",
    "section": "Google Colab",
    "text": "Google Colab\n\nDeben iniciar sesi√≥n con una cuenta de Google en https://colab.research.google.com/.\n\nEn el men√∫ superior izquierdo deben ir a Archivo ‚Üí Nuevo Cuaderno\". Luego a Entorno de ejecuci√≥n ‚Üí Cambiar entorno de ejecuci√≥n ‚Üí Cambiar donde dice \"Python 3\" por \"R\".\nEn estos entornos tendr√°n celdas con c√≥digo y celdas con texto 1.\nLas celdas se pueden iniciar con los botones y se ejecutan utilizando la combinaci√≥n de teclado CTRL + ENTER\n\n\n\n\n\n\n\nEste entorno se los recomendamos para cuando tengan m√°s clases del curso."
  },
  {
    "objectID": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#section",
    "href": "slides/00_clase-0/Clase_0_Presentaci√≥n.html#section",
    "title": "Instalaci√≥n R y RStudio",
    "section": "",
    "text": "¬°Gracias! \n\n\n\n\n\nMetodolog√≠a Cuantitativa - 2023"
  },
  {
    "objectID": "notes/Notas_Clase_1/Clase_1_Notas.html#bases",
    "href": "notes/Notas_Clase_1/Clase_1_Notas.html#bases",
    "title": "",
    "section": "Bases",
    "text": "Bases\nEn el siguiente documento se presentan aspectos importanes sobre vectores y matrices, as√≠ como una introducci√≥n a los dataframes y tibbles."
  },
  {
    "objectID": "notes/Notas_Clase_1/Clase_1_Notas.html#vectores",
    "href": "notes/Notas_Clase_1/Clase_1_Notas.html#vectores",
    "title": "",
    "section": "\n1 Vectores",
    "text": "1 Vectores\nLos vectores son arreglos unidimensionales que solo pueden contener un tipo de dato.\n\n1.1 Crear vectores\nLos vectores se definen escribiendo c(), que viene del ingl√©s combine. Cada uno de los elementos del vector se indican separando por coma. Se puede crear un objeto para guardar ese vector asign√°ndole un nombre seguido de &lt;-, como se muestra a continuaci√≥n:\n\nnombre_objeto &lt;- c() # Adentro van los elementos del vector\n\nPor ejemplo, en los siguientes casos se definen tres vectores que corresponden a tres tipos de datos revisados en clases: numeric, character y logical. Estos cumplen con el requisito de tener solamente datos de un mismo tipo.\nVector con elementos de tipo num√©rico\n\n# Definiendo mi primer vector num√©rico\nv_numerico &lt;- c(1, 3, 5, 7, 9)\n\nAdem√°s, en el caso de los vectores num√©ricos se puede indicar una secuencia utilizando la notaci√≥n de dos puntos :.\n\n# Entrega un vector con valores del 1 al 5\nv_numerico_1 &lt;- c(1:5)\nv_numerico_1 \n\n[1] 1 2 3 4 5\n\n\nO de igual forma se pueden combinar secuencias con n√∫meros espec√≠ficos y otra secuencia. Las secuencias pueden ser incrementales o decrementales.\n\n# Entrega un vector con valores del 1 al 5, 9 al 7 y el n√∫mero 256\nv_numerico_2 &lt;- c(1:5, 9:7, 256)\nv_numerico_2 \n\n[1]   1   2   3   4   5   9   8   7 256\n\n\nVector con elementos de tipo caracter.\n\n# Definiendo mi primer vector de caracteres\nv_caracteres &lt;- c(\"Hola Mag√≠ster de Trabajo Social\", \"A√±o 2023\")\n\nVector con elementos de tipo l√≥gico.\n\n# Definiendo mi primer vector logico\nv_logico &lt;- c(TRUE, FALSE, TRUE, FALSE, TRUE)\n\nSe puede comprobar que el elemento definido es un vector utilizando la funci√≥n is.vector(). Esta recibe como argumento (lo que va dentro del par√©ntesis) el nombre del objeto. Si es un vector, retornar√° TRUE, y si no lo es, devolver√° FALSE.\n\n# Comprobando que es un vector\nis.vector(v_numerico)\n\n[1] TRUE\n\n\nPara cualquier vector es posible obtener su largo, es decir, el n√∫mero de elementos que contiene, usando la funci√≥n length(). Esta funci√≥n retornar√° el valor que corresponde al largo de ese vector.\nEn el caso del vector num√©rico de ejemplo, este consta de 5 elementos.\n\n# Obteniendo el largo del vector\nlength(v_numerico)\n\n[1] 5\n\n\nPodemos comprobar el tipo de dato del vector utilizando las funciones class() y typeof()\n\nLa funci√≥n class() devuelve la clase del objeto.\nLa funci√≥n typeof() determina el m√©todo interno que usa R para guardar ese objeto.\n\n\n# Comprobamos la clase del vector num√©rico\nclass(v_numerico)\n\n[1] \"numeric\"\n\ntypeof(v_numerico)\n\n[1] \"double\"\n\n# Comprobamos la clase del vector de caracteres\nclass(v_caracteres)\n\n[1] \"character\"\n\ntypeof(v_caracteres)\n\n[1] \"character\"\n\n# Comprobamos la clase del vector l√≥gico\nclass(v_logico)\n\n[1] \"logical\"\n\ntypeof(v_logico)\n\n[1] \"logical\"\n\n\nLos vectores pueden elementos vac√≠os que se denotan como NA, que es un acr√≥nimo de Not Available. Esto se utiliza para indicar la ausencia de un valor. Si el valor NA est√° definido en el vector, este contar√° como un elemento m√°s.\n\n# Definiendo un vector num√©rico con NA\nv_numerico_na &lt;- c(5, 10, 33, 77, 101, 256, 5, NA, NA)\n\n\n# Definiendo un vector de caracteres con NA\nv_caracteres_na &lt;- c(\"Hola\", \"Primera Clase\", NA)\n\n\n# Definiendo un vector l√≥gico con NA\nv_logico_na &lt;- c(TRUE, FALSE, NA)\n\n\nlength(v_numerico_na)\n\n[1] 9\n\nlength(v_caracteres_na)\n\n[1] 3\n\nlength(v_logico_na)\n\n[1] 3\n\n\n\n1.2 Acceso a elementos\nCada elemento de un vector tiene una posici√≥n asignada, comenzando desde el 1. Para acceder a la posici√≥n del vector indicaremos el nombre del vector, seguido de par√©ntesis cuadrados [] (i.e.¬†nombre_objeto[]).\nPor ejemplo, podemos acceder al segundo elemento del vector num√©rico y del vector de caracteres.\n\n# Acceder a la segunda posici√≥n\nv_numerico[2]\n\n[1] 3\n\nv_caracteres[2]\n\n[1] \"A√±o 2023\"\n\n\n\n# Acceder a la segunda posici√≥n\nv_caracteres[2]\n\n[1] \"A√±o 2023\"\n\n\nUtilizando el s√≠mbolo de dos puntos : se puede indicar un rango de posiciones del vector a las que se quiere acceder.\n\n# Acceder a las tres primeras posiciones del vector\nv_numerico[1:3]\n\n[1] 1 3 5\n\n\nDe igual forma, se pueden utilizar otras funciones de R para acceder a posiciones del vector. Por ejemplo, la funci√≥n length() devuelve el largo de un vector (tambi√©n funciona para otras estructuras de datos)\n\n# Accede siempre a la √∫ltima posici√≥n sin conocer a priori su largo\nv_numerico[length(v_numerico)]\n\n[1] 9\n\n\nY si se quiere acceder a la pen√∫ltima posici√≥n, basta con obtener el largo del vector y restarle 1.\n\n# Accede siempre a la pen√∫ltima posici√≥n sin conocer a priori su largo.\nv_numerico[length(v_numerico) - 1]\n\n[1] 7\n\n\nEn caso de acceder a una posici√≥n que no est√© definida, el programa indicar√° un valor vac√≠o denonado por NA\n\n# Notar que en el vector definido no existe la posici√≥n 3\nv_caracteres[3]\n\n[1] NA\n\n\n\n1.3 Modificar o eliminar elementos\nDado un vector ya creado, es posible modificar o eliminar elementos de este. Si se desea eliminar, se debe anteponer un signo menos - indicando la posici√≥n que se quiere eliminar.\nEn el ejemplo a continuaci√≥n definimos usando un vector usando la funci√≥n seq, que corresponde a una secuencia que toma tres argumentos:\n\nfrom: indica el comienzo de la secuencia\nto: indica el final de la secuencia\nby: indica el incremento de la secuencia\n\n\nv_completo &lt;- seq(from = 10, to = 50, by = 10)\nv_completo \n\n[1] 10 20 30 40 50\n\n# Ahora eliminaremos el elemento que corresponda a la quinta posici√≥n\nv_cortado &lt;- v_completo[-4]\nv_cortado\n\n[1] 10 20 30 50\n\n\nY ahora modificaremos el valor 50 para que pase a ser 90.\n\n# Ahora al valor que corresponde a 50 le asignaremos el valor 90.\nv_cortado[v_cortado == 50] &lt;- 90\nv_cortado\n\n[1] 10 20 30 90\n\n\n\n\n\n\n\n\nNota\n\n\n\nExisten muchas m√°s operaciones para vectores, como ordenarlos, reemplazar texto, generar reglas de reemplazo, etc. Estas se ir√°n revisando a lo largo del curso con las funciones del paquete tidyverse()\n\n\n\n1.4 Combinar vectores\nSe pueden agregar elementos a un vector ya existente. Para ello, se puede emplear emplear la misma notaci√≥n c():\n\n# Combinando vectores\n\nmi_vector &lt;- c(\"Los juegos\")\nmi_vector &lt;- c(mi_vector, \"del hambre\")\n# Notar que ahora este vector tiene dos elementos\nmi_vector\n\n[1] \"Los juegos\" \"del hambre\"\n\n\nTambi√©n se pueden crear vectores que son combinaciones de vectores\n\n# Creando vectores a partir de combinaciones de vectores\nmi_vector_1 &lt;- c(1, 3, 5, 7)\nmi_vector_2 &lt;- c(2, 4, 6, 8)\nmi_vetor_3 &lt;- c(mi_vector_1, mi_vector_2)\nmi_vetor_3\n\n[1] 1 3 5 7 2 4 6 8\n\n\n\n1.5 Coerci√≥n\nCuando se crean o combinan vectores que tipos de datos diferentes, R realizar√° un proceso de coerci√≥n autom√°ticamente. Es decir, buscar√° convertir los datos al tipo m√°s flexible, siguiente unas reglas de jerarqu√≠a. El caso m√°s simple es cuando se tienen datos de tipo numeric y character, donde el programa forzar√° a que los datos sean de este √∫ltimo tipo.\n\n# Al definirse tiene datos de distinto tipo\nmi_vector_coercion &lt;- c(40, \"50 a√±os\", 33, \"33\") # Las comillas indican que es texto\n\n# Pero R genera una coerci√≥n\nclass(mi_vector_coercion)\n\n[1] \"character\"\n\n\n\n1.6 Operaciones con vectores\nTambi√©n se pueden realizar operaciones matem√°ticas con los vectores, tales como sumas, multiplicaciones, restas, etc.\n\n# Multiplicar el vector por 2\nmi_vector_multiplicar &lt;- c(2, 4, 6) * 2\nmi_vector_multiplicar\n\n[1]  4  8 12\n\n\nComo se puede apreciar, la operaci√≥n de multiplicar se est√° aplicando a cada uno de los elementos del vector.\nEsto nos introduce a un concepto de R conocido como vectorizaci√≥n. Esto quiere decir que hay operaciones que se aplican a cada uno de los elementos.\nLa vectorizaci√≥n funciona con otras estructuras de datos que veremos a lo largo del curso. Intuitivamente, bastar√° conocer que cuando una operaci√≥n se puede vectorizar, su tiempo de ejecuci√≥n es muy r√°pido.\n\n1.7 Reciclar vectores\nCuando dos vectores no tienen el mismo largo, R realizar√° un proceso que se conoce como reciclaje. Este consiste en que ir√° tomando cada uno de los valores del vector m√°s corto para que operen con los elementos del vector que a√∫n no tienen su ‚Äúpareja‚Äù.\nEn el ejemplo que se presenta a continuaci√≥n, se han sumado los valores del siguiente modo:\n\\[\n\\begin{gathered}\n\\ 2 + 4\n\\\\\n\\ 2 + 5\n\\\\\n\\text{Se acaban los valores del primer vector}\n\\\\\n\\ 2 + 6\n\\\\\n\\ 3 + 8\n\\\\\n\\text{Se recicla el valor 2 y 3 del primer vector}\n\\end{gathered}\n\\]\n\n# Vectores de distinto tipo\nv_largo2 &lt;- c(2, 3)\nv_largo3 &lt;- c(4, 5, 6, 8)\nv_largo_com &lt;- v_largo2 + v_largo3\nv_largo_com\n\n[1]  6  8  8 11"
  },
  {
    "objectID": "notes/Notas_Clase_1/Clase_1_Notas.html#matrices",
    "href": "notes/Notas_Clase_1/Clase_1_Notas.html#matrices",
    "title": "",
    "section": "\n2 Matrices",
    "text": "2 Matrices\nLas matrices son arreglos bidisimensionales que solo pueden contener un tipo de dato. Las matrices son una estructura con forma rectangular, formada por filas y columnas.\n\n2.1 Crear matrices\nSe definen escribiendo matrix(). Al menos cuatro argumentos nos resultar√°n relevantes de las matrices:\n\ndata: indica el vector de datos de la matriz\nnrow: indica el n√∫mero de filas\nncol: indica el n√∫mero de columnas\nbyrow: indica si el llenado es por filas o columnas. Por defecto viene en llenado por columnas.\n\nEjemplo de llenado por columnas\n\nmatriz_1 &lt;- matrix(1:9, ncol = 3) # Llenado por columnas\nmatriz_1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nEjemplo de llenado por filas\n\nmatriz_2 &lt;- matrix(1:9, ncol = 3, byrow = TRUE) # Llenado por filas\nmatriz_2\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n2.2 Crear matriz a partir de vectores\nEs posible crear matrices a partir de la uni√≥n de vectores. Para ello se pueden usar las siguientes funciones:\n\n\ncbind que viene de column bind (uni√≥n por columnas) donde cada vector corresponde a una columna.\n\nrbind que viene de row bind (uni√≥n por filas)\n\nEjemplos:\n\nv_parte_1 &lt;- c(1:2)\nv_parte_2 &lt;- c(3:4)\nv_parte_3 &lt;- c(5:6)\nv_parte_4 &lt;- c(7:8)\n\nmatriz_columna &lt;- cbind(v_parte_1, v_parte_2, v_parte_3, v_parte_4)\nmatriz_columna\n\n     v_parte_1 v_parte_2 v_parte_3 v_parte_4\n[1,]         1         3         5         7\n[2,]         2         4         6         8\n\nmatriz_fila &lt;- rbind(v_parte_1, v_parte_2, v_parte_3, v_parte_4)\nmatriz_fila \n\n          [,1] [,2]\nv_parte_1    1    2\nv_parte_2    3    4\nv_parte_3    5    6\nv_parte_4    7    8\n\n\n\n2.3 Acceso a elementos\nEn R las matrices siempre siguen el orden (filas, columnas). Con esta l√≥gica se puede seleccionar sus elementos:\n\\[\n\\begin{gathered}\n\\ \\text{matriz}[i,j]\n\\end{gathered}\n\\] \\[\n\\begin{aligned}\n\\text{Donde:}\n\\\\\n\\ \\text{matriz}[i,] = \\text{selecciona la \\textbf{fila} i-√©sima de la matriz.}\n\\\\\n\\ \\text{matriz}[, j] = \\text{selecciona la \\textbf{columna} j-√©sima de la matriz.}\n\\\\\n\\ \\text{matriz}[i, j] = \\text{selecciona el j-√©simo elemento de la i-√©sima fila}\n\\end{aligned}\n\\]\nRealicemos un ejemplo con la matriz_2\n\nmatriz_2[1, 1] # Estoy seleccionando la fila 1 columna 1\n\n[1] 1\n\nmatriz_2[2, 1] # Estoy seleccionando la fila 2 columna 1\n\n[1] 4\n\nmatriz_2[1, ] # Estoy seleccionando a toda la fila 1\n\n[1] 1 2 3\n\nmatriz_2[3, ] # Estoy seleccionando a toda la fila 3\n\n[1] 7 8 9\n\nmatriz_2[, 1] # Estoy seleccionando a toda la columna 1\n\n[1] 1 4 7"
  },
  {
    "objectID": "notes/Notas_Clase_1/Clase_1_Notas.html#dataframes-y-tibbles",
    "href": "notes/Notas_Clase_1/Clase_1_Notas.html#dataframes-y-tibbles",
    "title": "",
    "section": "\n3 Dataframes y tibbles",
    "text": "3 Dataframes y tibbles\n\n3.1 Generando dataframes y tibbles\nEn R los dataframes son arreglos de datos bidimensionales (filas y columnas), pero que permiten distintos tipos de datos.\nEs el caso usual de datos estructurados que se ven en los cursos de an√°lisis de datos: las filas representan observaciones y las columnas variables.\nLos tibbles son muy similares a los dataframe, pero con mejoras de calidad de vida. La funci√≥n proviene del paquete tidyverse.\nLos dataframes se generan a trav√©s de la funci√≥n data.frame(), mientras que los tibbles con tibble().\n\n# Se definen los vectores de datos\nnombre &lt;- c(\"Constanza\", \"Sofia\", \"Gonzalo\")\ncarrera &lt;- c(\"Ingenier√≠a\", \"Administraci√≥n\", \"Arqueolog√≠a\")\ngen &lt;- c(2013, 2018, 2023)\n\n\n# Generando una base de datos con data.frame()\ndata_estudiantes_df &lt;- data.frame(nombre, carrera, gen)\ndata_estudiantes_df\n\n     nombre        carrera  gen\n1 Constanza     Ingenier√≠a 2013\n2     Sofia Administraci√≥n 2018\n3   Gonzalo    Arqueolog√≠a 2023\n\n\n\n# Generando una base de datos con tibble()\ndata_estudiantes_tb &lt;- tibble(nombre, carrera, gen)\ndata_estudiantes_tb\n\n# A tibble: 3 √ó 3\n  nombre    carrera          gen\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Constanza Ingenier√≠a      2013\n2 Sofia     Administraci√≥n  2018\n3 Gonzalo   Arqueolog√≠a     2023\n\n\n\n3.2 Acceder a elementos\nEn los tibbles y dataframes uno tambi√©n puede seleccionar directamente filas o columnas. Para ello, existen dos opciones:\n\nUsar la notaci√≥n de $ para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de [[]] para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de matrices [i, j] para acceder a filas y columnas.\n\n\nnombre_base$nombre_variable\nnombre_base[i, j]\nnombre_base[[]]\n\nEjemplos:\n\ndata_estudiantes_tb$nombre # accedemos a la columna nombre con $. Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[\"nombre\"] # accedemos a la columna nombre con []. Esto devuelve un tibble\n\n# A tibble: 3 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n3 Gonzalo  \n\ndata_estudiantes_tb[[\"nombre\"]] # accedemos a la columna nombre con[[]] Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[[1]] # accedemos a la columna nombre con notaci√≥n por posici√≥n [[]]\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\n\n\ndata_estudiantes_tb[1, \"nombre\"] # accedemos a la fila 1 de la columna nombre\n\n# A tibble: 1 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n\ndata_estudiantes_tb[1:2, \"nombre\"] # accedemos a la fila 1 y 2 de la columna nombre\n\n# A tibble: 2 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n\ndata_estudiantes_tb[[3, 1]] # Accedemos a la columna 3, fila 1\n\n[1] \"Gonzalo\"\n\ndata_estudiantes_tb[1,] # Accedemos a toda la fila 1\n\n# A tibble: 1 √ó 3\n  nombre    carrera      gen\n  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;\n1 Constanza Ingenier√≠a  2013\n\ndata_estudiantes_tb[1,3] # Accedemos a la fila 1 columna 3\n\n# A tibble: 1 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n\n\n\ndata_estudiantes_tb[, -c(1)] # accedemos a todas las columnas menos nombre, por posici√≥n\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n\ndata_estudiantes_tb[, -c(1:2)] # accedemos a todas las columnas menos la 1 y la 2\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023\n\ndata_estudiantes_tb[, names(data_estudiantes_tb) != \"nombre\"] # accedemos a todas las columnas menos nombre\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n\n\n\ndata_estudiantes_tb[, !names(data_estudiantes_tb) %in% c(\"nombre\", \"carrera\")]\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023"
  },
  {
    "objectID": "notes/Notas_Clase_1/Clase_1_Notas.html",
    "href": "notes/Notas_Clase_1/Clase_1_Notas.html",
    "title": "",
    "section": "",
    "text": "En el siguiente documento se presentan aspectos importanes sobre vectores y matrices, as√≠ como una introducci√≥n a los dataframes y tibbles."
  },
  {
    "objectID": "header_notes/header_clase_1_notas.html",
    "href": "header_notes/header_clase_1_notas.html",
    "title": "Notas clase 1",
    "section": "",
    "text": "Descargar presentaci√≥n\n\nVuelve a la descripci√≥n del curso ‚èé"
  },
  {
    "objectID": "header_notes/header_clase_1_notas.html#presentaci√≥n-de-la-clase",
    "href": "header_notes/header_clase_1_notas.html#presentaci√≥n-de-la-clase",
    "title": "Notas clase 1",
    "section": "",
    "text": "Descargar presentaci√≥n\n\nVuelve a la descripci√≥n del curso ‚èé"
  },
  {
    "objectID": "notes/01_clase-1_notas/Clase_1_Notas.html#bases",
    "href": "notes/01_clase-1_notas/Clase_1_Notas.html#bases",
    "title": "",
    "section": "Bases",
    "text": "Bases\nEn el siguiente documento se presentan aspectos importanes sobre vectores y matrices, as√≠ como una introducci√≥n a los dataframes y tibbles."
  },
  {
    "objectID": "notes/01_clase-1_notas/Clase_1_Notas.html#vectores",
    "href": "notes/01_clase-1_notas/Clase_1_Notas.html#vectores",
    "title": "",
    "section": "\n1 Vectores",
    "text": "1 Vectores\nLos vectores son arreglos unidimensionales que solo pueden contener un tipo de dato.\n\n1.1 Crear vectores\nLos vectores se definen escribiendo c(), que viene del ingl√©s combine. Cada uno de los elementos del vector se indican separando por coma. Se puede crear un objeto para guardar ese vector asign√°ndole un nombre seguido de &lt;-, como se muestra a continuaci√≥n:\n\nnombre_objeto &lt;- c() # Adentro van los elementos del vector\n\nPor ejemplo, en los siguientes casos se definen tres vectores que corresponden a tres tipos de datos revisados en clases: numeric, character y logical. Estos cumplen con el requisito de tener solamente datos de un mismo tipo.\nVector con elementos de tipo num√©rico\n\n# Definiendo mi primer vector num√©rico\nv_numerico &lt;- c(1, 3, 5, 7, 9)\n\nAdem√°s, en el caso de los vectores num√©ricos se puede indicar una secuencia utilizando la notaci√≥n de dos puntos :.\n\n# Entrega un vector con valores del 1 al 5\nv_numerico_1 &lt;- c(1:5)\nv_numerico_1 \n\n[1] 1 2 3 4 5\n\n\nO de igual forma se pueden combinar secuencias con n√∫meros espec√≠ficos y otra secuencia. Las secuencias pueden ser incrementales o decrementales.\n\n# Entrega un vector con valores del 1 al 5, 9 al 7 y el n√∫mero 256\nv_numerico_2 &lt;- c(1:5, 9:7, 256)\nv_numerico_2 \n\n[1]   1   2   3   4   5   9   8   7 256\n\n\nVector con elementos de tipo caracter.\n\n# Definiendo mi primer vector de caracteres\nv_caracteres &lt;- c(\"Hola Mag√≠ster de Trabajo Social\", \"A√±o 2023\")\n\nVector con elementos de tipo l√≥gico.\n\n# Definiendo mi primer vector logico\nv_logico &lt;- c(TRUE, FALSE, TRUE, FALSE, TRUE)\n\nSe puede comprobar que el elemento definido es un vector utilizando la funci√≥n is.vector(). Esta recibe como argumento (lo que va dentro del par√©ntesis) el nombre del objeto. Si es un vector, retornar√° TRUE, y si no lo es, devolver√° FALSE.\n\n# Comprobando que es un vector\nis.vector(v_numerico)\n\n[1] TRUE\n\n\nPara cualquier vector es posible obtener su largo, es decir, el n√∫mero de elementos que contiene, usando la funci√≥n length(). Esta funci√≥n retornar√° el valor que corresponde al largo de ese vector.\nEn el caso del vector num√©rico de ejemplo, este consta de 5 elementos.\n\n# Obteniendo el largo del vector\nlength(v_numerico)\n\n[1] 5\n\n\nPodemos comprobar el tipo de dato del vector utilizando las funciones class() y typeof()\n\nLa funci√≥n class() devuelve la clase del objeto.\nLa funci√≥n typeof() determina el m√©todo interno que usa R para guardar ese objeto.\n\n\n# Comprobamos la clase del vector num√©rico\nclass(v_numerico)\n\n[1] \"numeric\"\n\ntypeof(v_numerico)\n\n[1] \"double\"\n\n# Comprobamos la clase del vector de caracteres\nclass(v_caracteres)\n\n[1] \"character\"\n\ntypeof(v_caracteres)\n\n[1] \"character\"\n\n# Comprobamos la clase del vector l√≥gico\nclass(v_logico)\n\n[1] \"logical\"\n\ntypeof(v_logico)\n\n[1] \"logical\"\n\n\nLos vectores pueden elementos vac√≠os que se denotan como NA, que es un acr√≥nimo de Not Available. Esto se utiliza para indicar la ausencia de un valor. Si el valor NA est√° definido en el vector, este contar√° como un elemento m√°s.\n\n# Definiendo un vector num√©rico con NA\nv_numerico_na &lt;- c(5, 10, 33, 77, 101, 256, 5, NA, NA)\n\n\n# Definiendo un vector de caracteres con NA\nv_caracteres_na &lt;- c(\"Hola\", \"Primera Clase\", NA)\n\n\n# Definiendo un vector l√≥gico con NA\nv_logico_na &lt;- c(TRUE, FALSE, NA)\n\n\nlength(v_numerico_na)\n\n[1] 9\n\nlength(v_caracteres_na)\n\n[1] 3\n\nlength(v_logico_na)\n\n[1] 3\n\n\n\n1.2 Acceso a elementos\nCada elemento de un vector tiene una posici√≥n asignada, comenzando desde el 1. Para acceder a la posici√≥n del vector indicaremos el nombre del vector, seguido de par√©ntesis cuadrados [] (i.e.¬†nombre_objeto[]).\nPor ejemplo, podemos acceder al segundo elemento del vector num√©rico y del vector de caracteres.\n\n# Acceder a la segunda posici√≥n\nv_numerico[2]\n\n[1] 3\n\nv_caracteres[2]\n\n[1] \"A√±o 2023\"\n\n\n\n# Acceder a la segunda posici√≥n\nv_caracteres[2]\n\n[1] \"A√±o 2023\"\n\n\nUtilizando el s√≠mbolo de dos puntos : se puede indicar un rango de posiciones del vector a las que se quiere acceder.\n\n# Acceder a las tres primeras posiciones del vector\nv_numerico[1:3]\n\n[1] 1 3 5\n\n\nDe igual forma, se pueden utilizar otras funciones de R para acceder a posiciones del vector. Por ejemplo, la funci√≥n length() devuelve el largo de un vector (tambi√©n funciona para otras estructuras de datos)\n\n# Accede siempre a la √∫ltima posici√≥n sin conocer a priori su largo\nv_numerico[length(v_numerico)]\n\n[1] 9\n\n\nY si se quiere acceder a la pen√∫ltima posici√≥n, basta con obtener el largo del vector y restarle 1.\n\n# Accede siempre a la pen√∫ltima posici√≥n sin conocer a priori su largo.\nv_numerico[length(v_numerico) - 1]\n\n[1] 7\n\n\nEn caso de acceder a una posici√≥n que no est√© definida, el programa indicar√° un valor vac√≠o denonado por NA\n\n# Notar que en el vector definido no existe la posici√≥n 3\nv_caracteres[3]\n\n[1] NA\n\n\n\n1.3 Modificar o eliminar elementos\nDado un vector ya creado, es posible modificar o eliminar elementos de este. Si se desea eliminar, se debe anteponer un signo menos - indicando la posici√≥n que se quiere eliminar.\nEn el ejemplo a continuaci√≥n definimos usando un vector usando la funci√≥n seq, que corresponde a una secuencia que toma tres argumentos:\n\nfrom: indica el comienzo de la secuencia\nto: indica el final de la secuencia\nby: indica el incremento de la secuencia\n\n\nv_completo &lt;- seq(from = 10, to = 50, by = 10)\nv_completo \n\n[1] 10 20 30 40 50\n\n# Ahora eliminaremos el elemento que corresponda a la quinta posici√≥n\nv_cortado &lt;- v_completo[-4]\nv_cortado\n\n[1] 10 20 30 50\n\n\nY ahora modificaremos el valor 50 para que pase a ser 90.\n\n# Ahora al valor que corresponde a 50 le asignaremos el valor 90.\nv_cortado[v_cortado == 50] &lt;- 90\nv_cortado\n\n[1] 10 20 30 90\n\n\n\n\n\n\n\n\nNota\n\n\n\nExisten muchas m√°s operaciones para vectores, como ordenarlos, reemplazar texto, generar reglas de reemplazo, etc. Estas se ir√°n revisando a lo largo del curso con las funciones del paquete tidyverse()\n\n\n\n1.4 Combinar vectores\nSe pueden agregar elementos a un vector ya existente. Para ello, se puede emplear emplear la misma notaci√≥n c():\n\n# Combinando vectores\n\nmi_vector &lt;- c(\"Los juegos\")\nmi_vector &lt;- c(mi_vector, \"del hambre\")\n# Notar que ahora este vector tiene dos elementos\nmi_vector\n\n[1] \"Los juegos\" \"del hambre\"\n\n\nTambi√©n se pueden crear vectores que son combinaciones de vectores\n\n# Creando vectores a partir de combinaciones de vectores\nmi_vector_1 &lt;- c(1, 3, 5, 7)\nmi_vector_2 &lt;- c(2, 4, 6, 8)\nmi_vetor_3 &lt;- c(mi_vector_1, mi_vector_2)\nmi_vetor_3\n\n[1] 1 3 5 7 2 4 6 8\n\n\n\n1.5 Coerci√≥n\nCuando se crean o combinan vectores que tipos de datos diferentes, R realizar√° un proceso de coerci√≥n autom√°ticamente. Es decir, buscar√° convertir los datos al tipo m√°s flexible, siguiente unas reglas de jerarqu√≠a. El caso m√°s simple es cuando se tienen datos de tipo numeric y character, donde el programa forzar√° a que los datos sean de este √∫ltimo tipo.\n\n# Al definirse tiene datos de distinto tipo\nmi_vector_coercion &lt;- c(40, \"50 a√±os\", 33, \"33\") # Las comillas indican que es texto\n\n# Pero R genera una coerci√≥n\nclass(mi_vector_coercion)\n\n[1] \"character\"\n\n\n\n1.6 Operaciones con vectores\nTambi√©n se pueden realizar operaciones matem√°ticas con los vectores, tales como sumas, multiplicaciones, restas, etc.\n\n# Multiplicar el vector por 2\nmi_vector_multiplicar &lt;- c(2, 4, 6) * 2\nmi_vector_multiplicar\n\n[1]  4  8 12\n\n\nComo se puede apreciar, la operaci√≥n de multiplicar se est√° aplicando a cada uno de los elementos del vector.\nEsto nos introduce a un concepto de R conocido como vectorizaci√≥n. Esto quiere decir que hay operaciones que se aplican a cada uno de los elementos.\nLa vectorizaci√≥n funciona con otras estructuras de datos que veremos a lo largo del curso. Intuitivamente, bastar√° conocer que cuando una operaci√≥n se puede vectorizar, su tiempo de ejecuci√≥n es muy r√°pido.\n\n1.7 Reciclar vectores\nCuando dos vectores no tienen el mismo largo, R realizar√° un proceso que se conoce como reciclaje. Este consiste en que ir√° tomando cada uno de los valores del vector m√°s corto para que operen con los elementos del vector que a√∫n no tienen su ‚Äúpareja‚Äù.\nEn el ejemplo que se presenta a continuaci√≥n, se han sumado los valores del siguiente modo:\n\\[\n\\begin{gathered}\n\\ 2 + 4\n\\\\\n\\ 2 + 5\n\\\\\n\\text{Se acaban los valores del primer vector}\n\\\\\n\\ 2 + 6\n\\\\\n\\ 3 + 8\n\\\\\n\\text{Se recicla el valor 2 y 3 del primer vector}\n\\end{gathered}\n\\]\n\n# Vectores de distinto tipo\nv_largo2 &lt;- c(2, 3)\nv_largo3 &lt;- c(4, 5, 6, 8)\nv_largo_com &lt;- v_largo2 + v_largo3\nv_largo_com\n\n[1]  6  8  8 11"
  },
  {
    "objectID": "notes/01_clase-1_notas/Clase_1_Notas.html#matrices",
    "href": "notes/01_clase-1_notas/Clase_1_Notas.html#matrices",
    "title": "",
    "section": "\n2 Matrices",
    "text": "2 Matrices\nLas matrices son arreglos bidisimensionales que solo pueden contener un tipo de dato. Las matrices son una estructura con forma rectangular, formada por filas y columnas.\n\n2.1 Crear matrices\nSe definen escribiendo matrix(). Al menos cuatro argumentos nos resultar√°n relevantes de las matrices:\n\ndata: indica el vector de datos de la matriz\nnrow: indica el n√∫mero de filas\nncol: indica el n√∫mero de columnas\nbyrow: indica si el llenado es por filas o columnas. Por defecto viene en llenado por columnas.\n\nEjemplo de llenado por columnas\n\nmatriz_1 &lt;- matrix(1:9, ncol = 3) # Llenado por columnas\nmatriz_1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nEjemplo de llenado por filas\n\nmatriz_2 &lt;- matrix(1:9, ncol = 3, byrow = TRUE) # Llenado por filas\nmatriz_2\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n2.2 Crear matriz a partir de vectores\nEs posible crear matrices a partir de la uni√≥n de vectores. Para ello se pueden usar las siguientes funciones:\n\n\ncbind que viene de column bind (uni√≥n por columnas) donde cada vector corresponde a una columna.\n\nrbind que viene de row bind (uni√≥n por filas)\n\nEjemplos:\n\nv_parte_1 &lt;- c(1:2)\nv_parte_2 &lt;- c(3:4)\nv_parte_3 &lt;- c(5:6)\nv_parte_4 &lt;- c(7:8)\n\nmatriz_columna &lt;- cbind(v_parte_1, v_parte_2, v_parte_3, v_parte_4)\nmatriz_columna\n\n     v_parte_1 v_parte_2 v_parte_3 v_parte_4\n[1,]         1         3         5         7\n[2,]         2         4         6         8\n\nmatriz_fila &lt;- rbind(v_parte_1, v_parte_2, v_parte_3, v_parte_4)\nmatriz_fila \n\n          [,1] [,2]\nv_parte_1    1    2\nv_parte_2    3    4\nv_parte_3    5    6\nv_parte_4    7    8\n\n\n\n2.3 Acceso a elementos\nEn R las matrices siempre siguen el orden (filas, columnas). Con esta l√≥gica se puede seleccionar sus elementos:\n\\[\n\\begin{gathered}\n\\ \\text{matriz}[i,j]\n\\end{gathered}\n\\] \\[\n\\begin{aligned}\n\\text{Donde:}\n\\\\\n\\ \\text{matriz}[i,] = \\text{selecciona la \\textbf{fila} i-√©sima de la matriz.}\n\\\\\n\\ \\text{matriz}[, j] = \\text{selecciona la \\textbf{columna} j-√©sima de la matriz.}\n\\\\\n\\ \\text{matriz}[i, j] = \\text{selecciona el j-√©simo elemento de la i-√©sima fila}\n\\end{aligned}\n\\]\nRealicemos un ejemplo con la matriz_2\n\nmatriz_2[1, 1] # Estoy seleccionando la fila 1 columna 1\n\n[1] 1\n\nmatriz_2[2, 1] # Estoy seleccionando la fila 2 columna 1\n\n[1] 4\n\nmatriz_2[1, ] # Estoy seleccionando a toda la fila 1\n\n[1] 1 2 3\n\nmatriz_2[3, ] # Estoy seleccionando a toda la fila 3\n\n[1] 7 8 9\n\nmatriz_2[, 1] # Estoy seleccionando a toda la columna 1\n\n[1] 1 4 7"
  },
  {
    "objectID": "notes/01_clase-1_notas/Clase_1_Notas.html#dataframes-y-tibbles",
    "href": "notes/01_clase-1_notas/Clase_1_Notas.html#dataframes-y-tibbles",
    "title": "",
    "section": "\n3 Dataframes y tibbles",
    "text": "3 Dataframes y tibbles\n\n3.1 Generando dataframes y tibbles\nEn R los dataframes son arreglos de datos bidimensionales (filas y columnas), pero que permiten distintos tipos de datos.\nEs el caso usual de datos estructurados que se ven en los cursos de an√°lisis de datos: las filas representan observaciones y las columnas variables.\nLos tibbles son muy similares a los dataframe, pero con mejoras de calidad de vida. La funci√≥n proviene del paquete tidyverse.\nLos dataframes se generan a trav√©s de la funci√≥n data.frame(), mientras que los tibbles con tibble().\n\n# Se definen los vectores de datos\nnombre &lt;- c(\"Constanza\", \"Sofia\", \"Gonzalo\")\ncarrera &lt;- c(\"Ingenier√≠a\", \"Administraci√≥n\", \"Arqueolog√≠a\")\ngen &lt;- c(2013, 2018, 2023)\n\n\n# Generando una base de datos con data.frame()\ndata_estudiantes_df &lt;- data.frame(nombre, carrera, gen)\ndata_estudiantes_df\n\n     nombre        carrera  gen\n1 Constanza     Ingenier√≠a 2013\n2     Sofia Administraci√≥n 2018\n3   Gonzalo    Arqueolog√≠a 2023\n\n\n\n# Generando una base de datos con tibble()\ndata_estudiantes_tb &lt;- tibble(nombre, carrera, gen)\ndata_estudiantes_tb\n\n# A tibble: 3 √ó 3\n  nombre    carrera          gen\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Constanza Ingenier√≠a      2013\n2 Sofia     Administraci√≥n  2018\n3 Gonzalo   Arqueolog√≠a     2023\n\n\n\n3.2 Acceder a elementos\nEn los tibbles y dataframes uno tambi√©n puede seleccionar directamente filas o columnas. Para ello, existen dos opciones:\n\nUsar la notaci√≥n de $ para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de [[]] para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de matrices [i, j] para acceder a filas y columnas.\n\n\nnombre_base$nombre_variable\nnombre_base[i, j]\nnombre_base[[]]\n\nEjemplos:\n\ndata_estudiantes_tb$nombre # accedemos a la columna nombre con $. Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[\"nombre\"] # accedemos a la columna nombre con []. Esto devuelve un tibble\n\n# A tibble: 3 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n3 Gonzalo  \n\ndata_estudiantes_tb[[\"nombre\"]] # accedemos a la columna nombre con[[]] Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[[1]] # accedemos a la columna nombre con notaci√≥n por posici√≥n [[]]\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\n\n\ndata_estudiantes_tb[1, \"nombre\"] # accedemos a la fila 1 de la columna nombre\n\n# A tibble: 1 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n\ndata_estudiantes_tb[1:2, \"nombre\"] # accedemos a la fila 1 y 2 de la columna nombre\n\n# A tibble: 2 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n\ndata_estudiantes_tb[[3, 1]] # Accedemos a la columna 3, fila 1\n\n[1] \"Gonzalo\"\n\ndata_estudiantes_tb[1,] # Accedemos a toda la fila 1\n\n# A tibble: 1 √ó 3\n  nombre    carrera      gen\n  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;\n1 Constanza Ingenier√≠a  2013\n\ndata_estudiantes_tb[1,3] # Accedemos a la fila 1 columna 3\n\n# A tibble: 1 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n\n\n\ndata_estudiantes_tb[, -c(1)] # accedemos a todas las columnas menos nombre, por posici√≥n\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n\ndata_estudiantes_tb[, -c(1:2)] # accedemos a todas las columnas menos la 1 y la 2\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023\n\ndata_estudiantes_tb[, names(data_estudiantes_tb) != \"nombre\"] # accedemos a todas las columnas menos nombre\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n\n\n\ndata_estudiantes_tb[, !names(data_estudiantes_tb) %in% c(\"nombre\", \"carrera\")]\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023"
  },
  {
    "objectID": "header_class/header_clase_1.html",
    "href": "header_class/header_clase_1.html",
    "title": "Clase 1",
    "section": "",
    "text": "Ideas m√°s importantes\n\n\n\n\nConcepto de ‚Äúobjeto‚Äù en R\nEstructuras de datos: vectores, matrices, dataframes\nInstalaci√≥n de librer√≠as o paquetes\nBuenas pr√°cticas para comentar c√≥digo"
  },
  {
    "objectID": "header_class/header_clase_1.html#presentaci√≥n-de-la-clase",
    "href": "header_class/header_clase_1.html#presentaci√≥n-de-la-clase",
    "title": "Clase 1",
    "section": "Presentaci√≥n de la clase",
    "text": "Presentaci√≥n de la clase\n\n\nDescargar presentaci√≥n"
  },
  {
    "objectID": "header_class/header_clase_0.html",
    "href": "header_class/header_clase_0.html",
    "title": "Clase 0",
    "section": "",
    "text": "Ideas m√°s importantes\n\n\n\n\nInstalaci√≥n de R y RStudio\nPersonalizaci√≥n de RStudio\nUso de R en la nube"
  },
  {
    "objectID": "header_class/header_clase_0.html#presentaci√≥n-de-la-clase",
    "href": "header_class/header_clase_0.html#presentaci√≥n-de-la-clase",
    "title": "Clase 0",
    "section": "Presentaci√≥n de la clase",
    "text": "Presentaci√≥n de la clase\n\n\nDescargar presentaci√≥n"
  },
  {
    "objectID": "header_class/header_clase_0.html#referencias",
    "href": "header_class/header_clase_0.html#referencias",
    "title": "Clase 0",
    "section": "Referencias",
    "text": "Referencias\n\nHands-On Programming with R: Write Your Own Functions and Simulations, Appendix: Installing R and RStudio. Click aqu√≠ ‚èé\n\n\nVuelve a la descripci√≥n del curso ‚èé"
  },
  {
    "objectID": "header_class/header_clase_1.html#notas-clases-1",
    "href": "header_class/header_clase_1.html#notas-clases-1",
    "title": "Clase 1",
    "section": "Notas clases 1",
    "text": "Notas clases 1\nDescargar notas\n\nVuelve a la descripci√≥n del curso ‚èé"
  },
  {
    "objectID": "notes/01_clase_1_notas/Clase_1_Notas.html#bases",
    "href": "notes/01_clase_1_notas/Clase_1_Notas.html#bases",
    "title": "Notas clase 1: Introducci√≥n a R",
    "section": "Bases",
    "text": "Bases\nEn el siguiente documento se presentan aspectos importanes sobre vectores y matrices, as√≠ como una introducci√≥n a los dataframes y tibbles."
  },
  {
    "objectID": "notes/01_clase_1_notas/Clase_1_Notas.html#vectores",
    "href": "notes/01_clase_1_notas/Clase_1_Notas.html#vectores",
    "title": "Notas clase 1: Introducci√≥n a R",
    "section": "\n1 Vectores",
    "text": "1 Vectores\nLos vectores son arreglos unidimensionales que solo pueden contener un tipo de dato.\n\n1.1 Crear vectores\nLos vectores se definen escribiendo c(), que viene del ingl√©s combine. Cada uno de los elementos del vector se indican separando por coma. Se puede crear un objeto para guardar ese vector asign√°ndole un nombre seguido de &lt;-, como se muestra a continuaci√≥n:\n\nnombre_objeto &lt;- c() # Adentro van los elementos del vector\n\nPor ejemplo, en los siguientes casos se definen tres vectores que corresponden a tres tipos de datos revisados en clases: numeric, character y logical. Estos cumplen con el requisito de tener solamente datos de un mismo tipo.\nVector con elementos de tipo num√©rico\n\n# Definiendo mi primer vector num√©rico\nv_numerico &lt;- c(1, 3, 5, 7, 9)\n\nAdem√°s, en el caso de los vectores num√©ricos se puede indicar una secuencia utilizando la notaci√≥n de dos puntos :.\n\n# Entrega un vector con valores del 1 al 5\nv_numerico_1 &lt;- c(1:5)\nv_numerico_1 \n\n[1] 1 2 3 4 5\n\n\nO de igual forma se pueden combinar secuencias con n√∫meros espec√≠ficos y otra secuencia. Las secuencias pueden ser incrementales o decrementales.\n\n# Entrega un vector con valores del 1 al 5, 9 al 7 y el n√∫mero 256\nv_numerico_2 &lt;- c(1:5, 9:7, 256)\nv_numerico_2 \n\n[1]   1   2   3   4   5   9   8   7 256\n\n\nVector con elementos de tipo caracter.\n\n# Definiendo mi primer vector de caracteres\nv_caracteres &lt;- c(\"Hola Mag√≠ster de Trabajo Social\", \"A√±o 2023\")\n\nVector con elementos de tipo l√≥gico.\n\n# Definiendo mi primer vector logico\nv_logico &lt;- c(TRUE, FALSE, TRUE, FALSE, TRUE)\n\nSe puede comprobar que el elemento definido es un vector utilizando la funci√≥n is.vector(). Esta recibe como argumento (lo que va dentro del par√©ntesis) el nombre del objeto. Si es un vector, retornar√° TRUE, y si no lo es, devolver√° FALSE.\n\n# Comprobando que es un vector\nis.vector(v_numerico)\n\n[1] TRUE\n\n\nPara cualquier vector es posible obtener su largo, es decir, el n√∫mero de elementos que contiene, usando la funci√≥n length(). Esta funci√≥n retornar√° el valor que corresponde al largo de ese vector.\nEn el caso del vector num√©rico de ejemplo, este consta de 5 elementos.\n\n# Obteniendo el largo del vector\nlength(v_numerico)\n\n[1] 5\n\n\nPodemos comprobar el tipo de dato del vector utilizando las funciones class() y typeof()\n\nLa funci√≥n class() devuelve la clase del objeto.\nLa funci√≥n typeof() determina el m√©todo interno que usa R para guardar ese objeto.\n\n\n# Comprobamos la clase del vector num√©rico\nclass(v_numerico)\n\n[1] \"numeric\"\n\ntypeof(v_numerico)\n\n[1] \"double\"\n\n# Comprobamos la clase del vector de caracteres\nclass(v_caracteres)\n\n[1] \"character\"\n\ntypeof(v_caracteres)\n\n[1] \"character\"\n\n# Comprobamos la clase del vector l√≥gico\nclass(v_logico)\n\n[1] \"logical\"\n\ntypeof(v_logico)\n\n[1] \"logical\"\n\n\nLos vectores pueden elementos vac√≠os que se denotan como NA, que es un acr√≥nimo de Not Available. Esto se utiliza para indicar la ausencia de un valor. Si el valor NA est√° definido en el vector, este contar√° como un elemento m√°s.\n\n# Definiendo un vector num√©rico con NA\nv_numerico_na &lt;- c(5, 10, 33, 77, 101, 256, 5, NA, NA)\n\n\n# Definiendo un vector de caracteres con NA\nv_caracteres_na &lt;- c(\"Hola\", \"Primera Clase\", NA)\n\n\n# Definiendo un vector l√≥gico con NA\nv_logico_na &lt;- c(TRUE, FALSE, NA)\n\n\nlength(v_numerico_na)\n\n[1] 9\n\nlength(v_caracteres_na)\n\n[1] 3\n\nlength(v_logico_na)\n\n[1] 3\n\n\n\n1.2 Acceso a elementos\nCada elemento de un vector tiene una posici√≥n asignada, comenzando desde el 1. Para acceder a la posici√≥n del vector indicaremos el nombre del vector, seguido de par√©ntesis cuadrados [] (i.e.¬†nombre_objeto[]).\nPor ejemplo, podemos acceder al segundo elemento del vector num√©rico y del vector de caracteres.\n\n# Acceder a la segunda posici√≥n\nv_numerico[2]\n\n[1] 3\n\nv_caracteres[2]\n\n[1] \"A√±o 2023\"\n\n\n\n# Acceder a la segunda posici√≥n\nv_caracteres[2]\n\n[1] \"A√±o 2023\"\n\n\nUtilizando el s√≠mbolo de dos puntos : se puede indicar un rango de posiciones del vector a las que se quiere acceder.\n\n# Acceder a las tres primeras posiciones del vector\nv_numerico[1:3]\n\n[1] 1 3 5\n\n\nDe igual forma, se pueden utilizar otras funciones de R para acceder a posiciones del vector. Por ejemplo, la funci√≥n length() devuelve el largo de un vector (tambi√©n funciona para otras estructuras de datos)\n\n# Accede siempre a la √∫ltima posici√≥n sin conocer a priori su largo\nv_numerico[length(v_numerico)]\n\n[1] 9\n\n\nY si se quiere acceder a la pen√∫ltima posici√≥n, basta con obtener el largo del vector y restarle 1.\n\n# Accede siempre a la pen√∫ltima posici√≥n sin conocer a priori su largo.\nv_numerico[length(v_numerico) - 1]\n\n[1] 7\n\n\nEn caso de acceder a una posici√≥n que no est√© definida, el programa indicar√° un valor vac√≠o denonado por NA\n\n# Notar que en el vector definido no existe la posici√≥n 3\nv_caracteres[3]\n\n[1] NA\n\n\n\n1.3 Modificar o eliminar elementos\nDado un vector ya creado, es posible modificar o eliminar elementos de este. Si se desea eliminar, se debe anteponer un signo menos - indicando la posici√≥n que se quiere eliminar.\nEn el ejemplo a continuaci√≥n definimos usando un vector usando la funci√≥n seq, que corresponde a una secuencia que toma tres argumentos:\n\nfrom: indica el comienzo de la secuencia\nto: indica el final de la secuencia\nby: indica el incremento de la secuencia\n\n\nv_completo &lt;- seq(from = 10, to = 50, by = 10)\nv_completo \n\n[1] 10 20 30 40 50\n\n# Ahora eliminaremos el elemento que corresponda a la quinta posici√≥n\nv_cortado &lt;- v_completo[-4]\nv_cortado\n\n[1] 10 20 30 50\n\n\nY ahora modificaremos el valor 50 para que pase a ser 90.\n\n# Ahora al valor que corresponde a 50 le asignaremos el valor 90.\nv_cortado[v_cortado == 50] &lt;- 90\nv_cortado\n\n[1] 10 20 30 90\n\n\n\n\n\n\n\n\nNota\n\n\n\nExisten muchas m√°s operaciones para vectores, como ordenarlos, reemplazar texto, generar reglas de reemplazo, etc. Estas se ir√°n revisando a lo largo del curso con las funciones del paquete tidyverse()\n\n\n\n1.4 Combinar vectores\nSe pueden agregar elementos a un vector ya existente. Para ello, se puede emplear emplear la misma notaci√≥n c():\n\n# Combinando vectores\n\nmi_vector &lt;- c(\"Los juegos\")\nmi_vector &lt;- c(mi_vector, \"del hambre\")\n# Notar que ahora este vector tiene dos elementos\nmi_vector\n\n[1] \"Los juegos\" \"del hambre\"\n\n\nTambi√©n se pueden crear vectores que son combinaciones de vectores\n\n# Creando vectores a partir de combinaciones de vectores\nmi_vector_1 &lt;- c(1, 3, 5, 7)\nmi_vector_2 &lt;- c(2, 4, 6, 8)\nmi_vetor_3 &lt;- c(mi_vector_1, mi_vector_2)\nmi_vetor_3\n\n[1] 1 3 5 7 2 4 6 8\n\n\n\n1.5 Coerci√≥n\nCuando se crean o combinan vectores que tipos de datos diferentes, R realizar√° un proceso de coerci√≥n autom√°ticamente. Es decir, buscar√° convertir los datos al tipo m√°s flexible, siguiente unas reglas de jerarqu√≠a. El caso m√°s simple es cuando se tienen datos de tipo numeric y character, donde el programa forzar√° a que los datos sean de este √∫ltimo tipo.\n\n# Al definirse tiene datos de distinto tipo\nmi_vector_coercion &lt;- c(40, \"50 a√±os\", 33, \"33\") # Las comillas indican que es texto\n\n# Pero R genera una coerci√≥n\nclass(mi_vector_coercion)\n\n[1] \"character\"\n\n\n\n1.6 Operaciones con vectores\nTambi√©n se pueden realizar operaciones matem√°ticas con los vectores, tales como sumas, multiplicaciones, restas, etc.\n\n# Multiplicar el vector por 2\nmi_vector_multiplicar &lt;- c(2, 4, 6) * 2\nmi_vector_multiplicar\n\n[1]  4  8 12\n\n\nComo se puede apreciar, la operaci√≥n de multiplicar se est√° aplicando a cada uno de los elementos del vector.\nEsto nos introduce a un concepto de R conocido como vectorizaci√≥n. Esto quiere decir que hay operaciones que se aplican a cada uno de los elementos.\nLa vectorizaci√≥n funciona con otras estructuras de datos que veremos a lo largo del curso. Intuitivamente, bastar√° conocer que cuando una operaci√≥n se puede vectorizar, su tiempo de ejecuci√≥n es muy r√°pido.\n\n1.7 Reciclar vectores\nCuando dos vectores no tienen el mismo largo, R realizar√° un proceso que se conoce como reciclaje. Este consiste en que ir√° tomando cada uno de los valores del vector m√°s corto para que operen con los elementos del vector que a√∫n no tienen su ‚Äúpareja‚Äù.\nEn el ejemplo que se presenta a continuaci√≥n, se han sumado los valores del siguiente modo:\n\\[\n\\begin{gathered}\n\\ 2 + 4\n\\\\\n\\ 2 + 5\n\\\\\n\\text{Se acaban los valores del primer vector}\n\\\\\n\\ 2 + 6\n\\\\\n\\ 3 + 8\n\\\\\n\\text{Se recicla el valor 2 y 3 del primer vector}\n\\end{gathered}\n\\]\n\n# Vectores de distinto tipo\nv_largo2 &lt;- c(2, 3)\nv_largo3 &lt;- c(4, 5, 6, 8)\nv_largo_com &lt;- v_largo2 + v_largo3\nv_largo_com\n\n[1]  6  8  8 11"
  },
  {
    "objectID": "notes/01_clase_1_notas/Clase_1_Notas.html#matrices",
    "href": "notes/01_clase_1_notas/Clase_1_Notas.html#matrices",
    "title": "Notas clase 1: Introducci√≥n a R",
    "section": "\n2 Matrices",
    "text": "2 Matrices\nLas matrices son arreglos bidisimensionales que solo pueden contener un tipo de dato. Las matrices son una estructura con forma rectangular, formada por filas y columnas.\n\n2.1 Crear matrices\nSe definen escribiendo matrix(). Al menos cuatro argumentos nos resultar√°n relevantes de las matrices:\n\ndata: indica el vector de datos de la matriz\nnrow: indica el n√∫mero de filas\nncol: indica el n√∫mero de columnas\nbyrow: indica si el llenado es por filas o columnas. Por defecto viene en llenado por columnas.\n\nEjemplo de llenado por columnas\n\nmatriz_1 &lt;- matrix(1:9, ncol = 3) # Llenado por columnas\nmatriz_1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nEjemplo de llenado por filas\n\nmatriz_2 &lt;- matrix(1:9, ncol = 3, byrow = TRUE) # Llenado por filas\nmatriz_2\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n2.2 Crear matriz a partir de vectores\nEs posible crear matrices a partir de la uni√≥n de vectores. Para ello se pueden usar las siguientes funciones:\n\n\ncbind que viene de column bind (uni√≥n por columnas) donde cada vector corresponde a una columna.\n\nrbind que viene de row bind (uni√≥n por filas)\n\nEjemplos:\n\nv_parte_1 &lt;- c(1:2)\nv_parte_2 &lt;- c(3:4)\nv_parte_3 &lt;- c(5:6)\nv_parte_4 &lt;- c(7:8)\n\nmatriz_columna &lt;- cbind(v_parte_1, v_parte_2, v_parte_3, v_parte_4)\nmatriz_columna\n\n     v_parte_1 v_parte_2 v_parte_3 v_parte_4\n[1,]         1         3         5         7\n[2,]         2         4         6         8\n\nmatriz_fila &lt;- rbind(v_parte_1, v_parte_2, v_parte_3, v_parte_4)\nmatriz_fila \n\n          [,1] [,2]\nv_parte_1    1    2\nv_parte_2    3    4\nv_parte_3    5    6\nv_parte_4    7    8\n\n\n\n2.3 Acceso a elementos\nEn R las matrices siempre siguen el orden (filas, columnas). Con esta l√≥gica se puede seleccionar sus elementos:\n\\[\n\\begin{gathered}\n\\ \\text{matriz}[i,j]\n\\end{gathered}\n\\] \\[\n\\begin{aligned}\n\\text{Donde:}\n\\\\\n\\ \\text{matriz}[i,] = \\text{selecciona la \\textbf{fila} i-√©sima de la matriz.}\n\\\\\n\\ \\text{matriz}[, j] = \\text{selecciona la \\textbf{columna} j-√©sima de la matriz.}\n\\\\\n\\ \\text{matriz}[i, j] = \\text{selecciona el j-√©simo elemento de la i-√©sima fila}\n\\end{aligned}\n\\]\nRealicemos un ejemplo con la matriz_2\n\nmatriz_2[1, 1] # Estoy seleccionando la fila 1 columna 1\n\n[1] 1\n\nmatriz_2[2, 1] # Estoy seleccionando la fila 2 columna 1\n\n[1] 4\n\nmatriz_2[1, ] # Estoy seleccionando a toda la fila 1\n\n[1] 1 2 3\n\nmatriz_2[3, ] # Estoy seleccionando a toda la fila 3\n\n[1] 7 8 9\n\nmatriz_2[, 1] # Estoy seleccionando a toda la columna 1\n\n[1] 1 4 7"
  },
  {
    "objectID": "notes/01_clase_1_notas/Clase_1_Notas.html#dataframes-y-tibbles",
    "href": "notes/01_clase_1_notas/Clase_1_Notas.html#dataframes-y-tibbles",
    "title": "Notas clase 1: Introducci√≥n a R",
    "section": "\n3 Dataframes y tibbles",
    "text": "3 Dataframes y tibbles\n\n3.1 Generando dataframes y tibbles\nEn R los dataframes son arreglos de datos bidimensionales (filas y columnas), pero que permiten distintos tipos de datos.\nEs el caso usual de datos estructurados que se ven en los cursos de an√°lisis de datos: las filas representan observaciones y las columnas variables.\nLos tibbles son muy similares a los dataframe, pero con mejoras de calidad de vida. La funci√≥n proviene del paquete tidyverse.\nLos dataframes se generan a trav√©s de la funci√≥n data.frame(), mientras que los tibbles con tibble().\n\n# Se definen los vectores de datos\nnombre &lt;- c(\"Constanza\", \"Sofia\", \"Gonzalo\")\ncarrera &lt;- c(\"Ingenier√≠a\", \"Administraci√≥n\", \"Arqueolog√≠a\")\ngen &lt;- c(2013, 2018, 2023)\n\n\n# Generando una base de datos con data.frame()\ndata_estudiantes_df &lt;- data.frame(nombre, carrera, gen)\ndata_estudiantes_df\n\n     nombre        carrera  gen\n1 Constanza     Ingenier√≠a 2013\n2     Sofia Administraci√≥n 2018\n3   Gonzalo    Arqueolog√≠a 2023\n\n\n\n# Generando una base de datos con tibble()\ndata_estudiantes_tb &lt;- tibble(nombre, carrera, gen)\ndata_estudiantes_tb\n\n# A tibble: 3 √ó 3\n  nombre    carrera          gen\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Constanza Ingenier√≠a      2013\n2 Sofia     Administraci√≥n  2018\n3 Gonzalo   Arqueolog√≠a     2023\n\n\n\n3.2 Acceder a elementos\nEn los tibbles y dataframes uno tambi√©n puede seleccionar directamente filas o columnas. Para ello, existen dos opciones:\n\nUsar la notaci√≥n de $ para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de [[]] para acceder a columnas espec√≠ficas.\nUsar la notaci√≥n de matrices [i, j] para acceder a filas y columnas.\n\n\nnombre_base$nombre_variable\nnombre_base[i, j]\nnombre_base[[]]\n\nEjemplos:\n\ndata_estudiantes_tb$nombre # accedemos a la columna nombre con $. Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[\"nombre\"] # accedemos a la columna nombre con []. Esto devuelve un tibble\n\n# A tibble: 3 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n3 Gonzalo  \n\ndata_estudiantes_tb[[\"nombre\"]] # accedemos a la columna nombre con[[]] Esto devuelve un vector\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\ndata_estudiantes_tb[[1]] # accedemos a la columna nombre con notaci√≥n por posici√≥n [[]]\n\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n\n\n\ndata_estudiantes_tb[1, \"nombre\"] # accedemos a la fila 1 de la columna nombre\n\n# A tibble: 1 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n\ndata_estudiantes_tb[1:2, \"nombre\"] # accedemos a la fila 1 y 2 de la columna nombre\n\n# A tibble: 2 √ó 1\n  nombre   \n  &lt;chr&gt;    \n1 Constanza\n2 Sofia    \n\ndata_estudiantes_tb[[3, 1]] # Accedemos a la columna 3, fila 1\n\n[1] \"Gonzalo\"\n\ndata_estudiantes_tb[1,] # Accedemos a toda la fila 1\n\n# A tibble: 1 √ó 3\n  nombre    carrera      gen\n  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;\n1 Constanza Ingenier√≠a  2013\n\ndata_estudiantes_tb[1,3] # Accedemos a la fila 1 columna 3\n\n# A tibble: 1 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n\n\n\ndata_estudiantes_tb[, -c(1)] # accedemos a todas las columnas menos nombre, por posici√≥n\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n\ndata_estudiantes_tb[, -c(1:2)] # accedemos a todas las columnas menos la 1 y la 2\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023\n\ndata_estudiantes_tb[, names(data_estudiantes_tb) != \"nombre\"] # accedemos a todas las columnas menos nombre\n\n# A tibble: 3 √ó 2\n  carrera          gen\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n\n\n\ndata_estudiantes_tb[, !names(data_estudiantes_tb) %in% c(\"nombre\", \"carrera\")]\n\n# A tibble: 3 √ó 1\n    gen\n  &lt;dbl&gt;\n1  2013\n2  2018\n3  2023"
  }
]