---
# Title & Author
title: "Clase 1: Introducci√≥n a R"
subtitle: "Metodolog√≠a Cuantitativa - TSM301"
author: "Sebasti√°n Rojas Vergara - sirojas1@uc.cl"
#institute:
#order:
date: today
# Format Options
format:
  revealjs: 
    slide-number: true
    #chalkboard: 
      #buttons: false
    smaller: true
    controls: true
    toc: false
    number-sections: false
    fig-dpi: 400
    fig-responsive: true
    embed-resources: true
    preview-links: auto
    theme: [dark, aquamarine.scss]
    logo: images/logo_puc_bn.png
    css: styles.css
    footer: "Metodolog√≠a Cuantitativa - 2023"
date-format: "DD MMM YYYY"
execute: 
  echo: true
---


## Contenidos

**I. ¬øQu√© es R?**

**II. ¬øPor qu√© usar R?**

**III. Iniciando R**

**IV. Bases de R**

**V. Comentando Scripts**


##  {background-color=rgb(25,25,25)}

:::{.center-xy}

<div class="large-text">
<br>
I. ¬øQu√© es R? <br>
</div>
:::

## ¬øQu√© es R? (1)

:::: {.columns}

::: {.column width="50%"}

- R es un lenguaje de programaci√≥n para la computaci√≥n estad√≠stica y la visualizaci√≥n creado por Robert Gentleman y Ross Ihaka, profesores de estad√≠stica de la Universidad de Auckland en Nueva Zelanda. 

- Tiene la ventaja de ser **gratuito** y **libre**. 

- Una forma de contribuir al desarrollo de R es mediante la creaci√≥n de un **paquete**.

- Implica escribir c√≥digo, que es la manera que tenemos de comunicarnos con el lenguaje.

- Lo usaremos a trav√©s del IDE RStudio.

:::


::: {.column width="50%"}

![](images/logo_r.png){width=200 height=auto fig-align=center}

![](images/logo_rstudio.png){width=400 height=auto fig-align=center}

:::

:::

##  {background-color=rgb(25,25,25)}

:::{.center-xy}

<div class="large-text">
<br>
II. ¬øPor qu√© usar R? <br>
</div>
:::

## ¬øPor qu√© usar R? Caracteristicas (1)

- **Gratuito**. A diferencia de otros softwares de ciencias sociales (v.g. SPSS) o el propio Excel.

- **Libre**. Permite que la comunidad introduzca nuevas funciones al software.

- **Potencia**. Permite articular de mejor forma el procesamiento, an√°lisis, visualizaci√≥n y reporter√≠a de datos.

- **Campo de aplicaci√≥n**. Estad√≠stica, negocios, ciencia de datos, ciencias naturales, etc.

Pero tambi√©n tiene desventajas ü•∫

- Curva de aprendizaje empinada.

- No est√° pensado para ejecutar comandos por interfaz gr√°fica, lo que puede ser dif√≠cil para algunas personas.

## ¬øPor qu√© usar R? Crecimiento (2)

El uso de `R` ha aumentado durante los √∫ltimos 15 a√±os. Este fen√≥meno se ha replicado en las ciencias sociales.

![](images/tiobe_r.png){width=1600 height=auto fig-align=center}

##  {background-color=rgb(25,25,25)}

:::{.center-xy}

<div class="large-text">
<br>
III. Iniciando R <br>
</div>
:::

## RStudio

Al abrir `RStudio` se encontrar√°n con tres paneles:

- La **Consola** marcada por el recuadro color <span class="fondo-gris" style = "color:#800080">lila</span>

- El **Enviroment** o ambiente de trabajo en un color <span class="fondo-gris" style = "color:#FA8072">salm√≥n</span>

- Las **Utilidades** en color <span class="fondo-gris" style = "color:#228B22">verde</span>

![](images/panel_rstudio.png){width=1200 height=auto fig-align=center}

## Comenzar un script

Los comandos que ejecutaremos directamente en la consola no mantienen un registro, por lo que usaremos un `Script` de R para conservar el c√≥digo. Para iniciar un Script tenemos dos alternativas:

1. Seleccionar **`File ‚Üí New File ‚Üí R Script`**

2. Usar el atajo de teclado **`CTRL/CMD + SHIFT + N`**

La forma m√°s sencilla de utilizar `R` ser√≠a como una calculadora:

```{r}
# Esto es una suma

1 + 1
```

## Atajos relevantes para correr scripts

- **`CTRL/CMD + ENTER ‚Üí`** Ejecuta la l√≠nea que tienen seleccionada en el curso
- **`CTRL/CMD + SHIFT + ENTER ‚Üí`** Ejecuta todo el c√≥digo
- **`CTR/CMD + L ‚Üí`** Limpia toda la consola de resultados de R
- **`CTRL/CMD + S ‚Üí`** Guarda el script. Si este no tiene nombre, primero pedir√° guardarlo en un directorio y asignarle nombre

##  {background-color=rgb(25,25,25)}

:::{.center-xy}

<div class="large-text">
<br>
IV. Bases de R <br>
</div>
:::

## C√°lculos en R

Es posible usar R como una calculadora. Las operaciones m√°s utilizadas son las siguientes

|   | **Operaci√≥n**|
|---|---|
|`+`|Suma|
|`-`|Resta|
|`*`|Multiplicaci√≥n|
|`/`|Divisi√≥n|
|`^`|Potencia|
|`sqrt` |Ra√≠z cuadrada|
|`log()`|Logaritmo base|

## Objetos en R

- En R podemos crear objetos que guarden informaci√≥n o resultados. Para ello, se escribe el nombre y se les asigna los valores con el operador **`<-`**.

- Los nombres permiten representar resultados de manera m√°s f√°cil. Ejemplo:

  1. Ingresamos tres notas y las dividimos por 3. Este resultado queda guardado en el objeto llamado **"promedio"**.

  2. Luego, si queremos ver el resultado, basta con llamar al objeto **promedio**.

  3. Si el nombre del objeto ya existe, se sobreescribir√° su contenido.
   
```{r}
# Guardamos esta operaci√≥n matem√°tica en un objeto llamado "promedio"

promedio <- (5.5  + 3.8 + 6.1) / 3
```

## Nombrar objetos

- Evite caracteres especiales como tildes, √±, espacios, etc.

- Consistencia en los nombres de variables. Puede usar nomenclaturas como **Snake Case** donde los nombres se escriben en el formato "nombre_objeto" o **Camel Case** que sigue el est√°ndar "NombreObjeto".

- Recordar que R es sensible a may√∫sculas y min√∫sculas. En el ejemplo anterior, definimos el objeto **`promedio`**. Si escribi√©ramos **`Promedio`** el software no lo reconocer√°.

## Estructuras de datos

- R cuenta con clases y tipos de datos definidos de antemano, los cuales dependen de la informaci√≥n que contengan en su interior. Los comandos **`class`** y **`typeof`** sirven para preguntar el tipo de cada elemento.

- En la siguiente tabla se muestran algunos de las clases m√°s frecuentes en R.

::: {.mini-text}
| **Tipo**  |**Descripci√≥n**|**Ejemplo**
| ---- |----------------|------------------------------------|
|`integer`|N√∫meros enteros|-1, 0, 1|
|`numeric`|N√∫meros reales|-0.5, 1/2, 1|
|`character`|Texto/String|"Erwin", "Armin", "Sasha", "Titanes"|
|`factor`|Datos categ√≥ricos|"Trabajo Social [1]", "Otra carrera [2]"|
|`haven_labelled`|Valores num√©ricos con etiquetas asociadas|1 = "Muy en desacuerdo"; 2 = "En desacuerdo"; 3 "Ni de acuerdo ni en desacuerdo"; 4 = "De acuerdo"; 5 "Muy de acuerdo"|
|`logical`|Verdadero o falso|"TRUE", "FALSE"|
:::

## Vectores (1)

Los **vectores** son ordenamientos unidimensionales que solo pueden contener un tipo de dato. Se definen con el comando **`c()`**.

Los vectores tienen valores y adem√°s una posici√≥n (index) asociada a cada valor. Esta comienza desde el n√∫mero 1 en adelante.

![](images/vectores.png){width=150 height=auto fig-align=center}

```{r}
v_numerico <- c(1, 3, 5, 7, 9) # Vector que solo contiene n√∫meros
class(v_numerico)
```

## Vectores (2)

- Un vector solamente puede contener caracteres o solamente puede contener n√∫meros. En los casos en que se produzca una mezcla, R realizar√° una transformaci√≥n en los datos para que contengan solo un tipo de dato.  

Con el comando `class()` y `typeof()` se puede obtener informaci√≥n sobre los objetos

- `class()` nos dir√° de qu√© clase es el objeto. Para este curso, de preferencia usaremos este.

- `typeof()` nos dir√° el modo de almacenamiento de ese objeto.

```{r}
class(v_numerico)

typeof(v_numerico)
```

## Vectores (3)

- Si un vector contiene m√°s de un tipo de dato, el programa forzar√° a que todos los datos sean del mismo tipo. Este proceso se conoce como **coerci√≥n**. 

- Noten que si el texto est√° entre comillas, el programa lo reconocer√° como un caracter. 

```{r}

ejemplo_character <- "Soy un character inocente"

class(ejemplo_character)
typeof(ejemplo_character)

v_char <- c(40, "50 a√±os", 33, "33") # Las comillas indican que es texto


# ¬øY si comprobamos la clase del √∫ltio vector que generamos?

# ¬°Pregunta! ¬øPor qu√© es de clase character?
class(v_char)
typeof(v_char)
```

## Vectores (4)

Es posible acceder a cualquier elemento de un vector a trav√©s de su posici√≥n usando la notaci√≥n **`[]`**[^1].

::: {.mini-mini-text}

[^1]: Nota: si tienen problemas para escribirlos con el teclado, pueden usar `ALT + 91` para [ y `ALT + 93` para ]. Usualmente con solo escribir uno R deber√≠a autocompletar.


:::

Respondamos algunas preguntas:

- ¬øDe qu√© tipo es este vector?

- ¬øCu√°ntos elementos o qu√© largo tiene este vector?

- ¬øC√≥mo puedo acceder al primer elemento del vector?

- ¬øC√≥mo puedo acceder a los dos primeros elementos del vector?

- ¬øC√≥mo puedo acceder a la √∫ltima posici√≥n, sin saber su largo a priori?


## Vectores (5)

```{r}

despedida <- c("Eren", "Mikasa", "Armin", "Gracias por todo",
              "Casi terminas :/", "Este 2023")

class(despedida)

length(despedida)

despedida[1]

despedida[1:2]

despedida[length(despedida)] # length es una funci√≥n de R que entrega el largo de un vector
```

## Matrices (1)

- Las **matrices** son estructuras bidimensionales, pues tienen filas y columnas, pero donde solo puede existir un tipo de dato. Se crean con el comando **`matrix()`**. Este comando sigue la siguiente estructura:

**`matrix(vector, ncol = n, nrow = m, byrow = FALSE)`**.

  - Primero se especifican los datos de la matriz.
  - Luego se especifica el n√∫mero de filas.
  - Luego se especifica el n√∫mero de columnas.
  - El argumento byrow puede tomar dos valores. Si es FALSE, la matriz se llenar√° por columnas, es decir, completar√° una columna y luego continuar√° con los valores. Si el argumento es TRUE, se llenar√° por filas, es decir, completar√° una fila y luego pasar√° a la siguiente. El valor por defecto siempre es FALSE para esta funci√≥n.

## Matrices (2)

Ejemplo de llenado por columnas

```{r}
matriz_1 <- matrix(1:9, ncol = 3) # Llenado por columnas
matriz_1
matriz_2 <- matrix(1:9, ncol = 3, byrow = TRUE) # Llenado por filas
matriz_2
```
Ejemplo de llenado por filas

```{r}

matriz_2 <- matrix(1:9, ncol = 3, byrow = TRUE) # Llenado por filas
matriz_2
```

## Acceder a elementos

- En R las matrices siempre siguen el orden (filas, columnas). Con esta l√≥gica se puede seleccionar sus elementos: **`mi_matriz[i, j] ~ i = filas, j = columnas`**.

   - **`mi_matriz[i, ]`**: selecciona la **fila** i-√©sima de la matriz.
   - **`mi_matriz[, j]`**: selecciona la **columna** j-√©sima de la matriz.
   - **`mi_matriz[i, j]`**: selecciona el j-√©simo elemento de la i-√©sima fila
   
Realicemos un ejemplo con la `matriz_2`

```{r}
matriz_2[1, 1] # Estoy seleccionando la fila 1 columna 1
matriz_2[2, 1] # Estoy seleccionando la fila 2 columna 1
matriz_2[1, ] # Estoy seleccionando a toda la fila 1
matriz_2[3, ] # Estoy seleccionando a toda la fila 3
matriz_2[, 1] # Estoy seleccionando a toda la columna 1
```

## Dataframe y tibble (1)

En R los **data frame** son arreglos de datos bidimensionales (filas y columnas), pero que permiten distintos tipos de datos.

Es el caso usual de datos estructurados que se ven en los cursos de an√°lisis de datos: las filas representan observaciones y las columnas variables.

Los **tibbles** son muy similares a los data frame, pero con mejoras de calidad de vida. La funci√≥n proviene del paquete **`tidyverse`**.

Se pueden generar directamente tibbles con el comando **`tibble`** o transformar estructruras previas (como matrices) con **`as_tibble`**.

Para trabajar con tibbles, requeriremos un paso previo antes üòÆ

## Instalaci√≥n de paquetes

- Los paquetes permiten agregar funciones adicionales a R. Para su instalaci√≥n, debemos usar el comando **`install.packages("nombrepaquete")`**. 

- Se debe tener mucho cuidado con especificar de manera correcta el comando, o arrojar√° error.

- Para utilizar el paquete ya instalado, en la sesi√≥n actual, se debe utilizar el comando **`library("nombrepaquete")`**.

- Prueben instalando y llamando el paquete **`tidyverse`**.

```{r}
#| eval: false

install.packages("tidyverse")
```

```{r}
# O un c√≥digo m√°s elegante, donde se instala solo si no lo tiene

if (!require("tidyverse")) install.packages("tidyverse")
```

```{r}
# Cuando el paquete ya est√° instalado, se debe ejecutar library()

library(tidyverse)

```

## Dataframe y tibble (2)

- En los tibbles y dataframes uno tambi√©n puede seleccionar directamente filas o columnas. Para ello, existen dos opciones:

- Usar la notaci√≥n de `$` para acceder a columnas espec√≠ficas.

- Usar la notaci√≥n de `[[]]` para acceder a columnas espec√≠ficas.

- Usar la notaci√≥n de matrices `[i, j]` para acceder a filas y columnas.

```{r}
#| eval: false
nombre_base$nombre_variable
nombre_base[i, j]
nombre_base[[]]
```

## Generando un tibble (1)

Para este ejemplo crearemos tres vectores y luego los guardaremos como un tibble.

```{r}
nombre <- c("Constanza", "Sofia", "Gonzalo")
carrera <- c("Ingenier√≠a", "Administraci√≥n", "Arqueolog√≠a")
gen <- c(2013, 2018, 2023)
```

```{r}
data_estudiantes_df <- data.frame(nombre, carrera, gen)

data_estudiantes_df

# Generando una base de datos con comando tibble

if (!require("tidyverse")) install.packages("tidyverse")
# Con este c√≥digo el programa instalar√° el paquete
# solo si no lo tiene

library(tidyverse)
```

## Generando un tibble (2)

```{r}
data_estudiantes_tb <- tibble(nombre, carrera, gen)

data_estudiantes_tb

# Con el comando View() con la primera en may√∫scula, ver√°n este tibble en RStudio.

View(data_estudiantes_tb)
```

## Acceder a elementos del tibble  (1)

```{r}
data_estudiantes_tb$nombre # accedemos a la columna nombre con $. Esto devuelve un vector
data_estudiantes_tb["nombre"] # accedemos a la columna nombre con []. Esto devuelve un tibble
data_estudiantes_tb[["nombre"]] # accedemos a la columna nombre con[[]] Esto devuelve un vector
data_estudiantes_tb[[1]] # accedemos a la columna nombre con notaci√≥n por posici√≥n [[]]
```

## Acceder a elementos del tibble (2)

```{r}
data_estudiantes_tb[1, "nombre"] # accedemos a la fila 1 de la columna nombre
data_estudiantes_tb[1:2, "nombre"] # accedemos a la fila 1 y 2 de la columna nombre
data_estudiantes_tb[[3, 1]] # Accedemos a la columna 3, fila 1
data_estudiantes_tb[1,] # Accedemos a toda la fila 1
data_estudiantes_tb[1,3] # Accedemos a la fila 1 columna 3
```

## Acceder a elementos del tibble (3)

Acceder de manera negativa o excluyendo elementos

```{r}
data_estudiantes_tb[, -c(1)] # accedemos a todas las columnas menos nombre, por posici√≥n
data_estudiantes_tb[, -c(1:2)] # accedemos a todas las columnas menos la 1 y la 2
data_estudiantes_tb[, names(data_estudiantes_tb) != "nombre"] # accedemos a todas las columnas menos nombre
```

## Acceder a elementos del tibble (4)

Acceder de manera negativa o excluyendo elementos

```{r}
data_estudiantes_tb[, !names(data_estudiantes_tb) %in% c("nombre", "carrera")]
```

## Seccionar un script 

Se puede establecer un orden de t√≠tulos y subt√≠tulos que ordenen el script mediante el siguiente esquema:

   - **#** y cuatro guiones medios indican una secci√≥n.
   - **##** y cuatro guiones medios indican una subsecci√≥n anidada a la secci√≥n.
   - **###** y cuatro guiones medios indican una sub-subsecci√≥n.
   
```{r}
# Proceso 1 ----

## Subproceso 1.1 ----

### Sub-subproceso 1.1.1 ----
```

Para ver la barra de navegaci√≥n utilizamos el atajo **`CTRL/CMD + SHIFT + O`**.

---

## Guardar un script
   
- Si queremos guardar este script, tenemos tres alternativas:

   1. Seleccionar el √≠cono de disquette que est√° sobre el script.
   
   2. Ir a **`File ‚Üí Save`**.
   
   3. Usar el atajo **`CTRL/CMD + S`**.
   
- Por √∫ltimo, tener en cuenta que RStudio cuenta con **autocompletado** y un **diagn√≥stico de errores** (aparecer√° un √≠cono con una marca roja en forma de "x" en la l√≠nea donde hay problemas).


##  {background-color=rgb(25,25,25)}

:::{.center-xy}

<div class="large-text">
<br>
¬°Gracias! <br>
[https://sirojasv.github.io/tsm_web/](https://sirojasv.github.io/tsm_web/)
</div>
:::