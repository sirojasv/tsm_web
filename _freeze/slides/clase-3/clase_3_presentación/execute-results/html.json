{
  "hash": "bf4fbdbe00a2ede276b3dccec4b7ee40",
  "result": {
    "markdown": "---\n# Title & Author\ntitle: \"Introducción a Tidyverse\"\nsubtitle: | \n    | Metodología Cuantitativa - TSM301\n    | Clase 3\nauthor: \"Sebastián Rojas Vergara - sirojas1@uc.cl\"\n#institute:\n#order:\ndate: 09/06/2023\ndate-format: \"dddd D MMMM, YYYY\"\n# Format Options\nformat:\n  revealjs: \n    slide-number: true\n    transition: slide\n    transition-speed: slow\n    #chalkboard: \n      #buttons: false\n    smaller: true\n    controls: true\n    toc: false\n    number-sections: false\n    fig-dpi: 400\n    fig-cap-location: top\n    fig-responsive: true\n    embed-resources: true\n    preview-links: auto\n    theme: [dark, violet.scss]\n    logo: images/logo_puc_bn.png\n    css: styles.css\n    footer: \"Metodología Cuantitativa - 2023\"\ncomments: false\nexecute: \n  echo: true\n---\n\n\n\n## Contenidos\n\n**I. Tidyverse**\n\n**II. Operador pipe `|>`**\n\n**III. Paquete dplyr**\n\n**IV. Aplicación**\n\n**V. Ejercicio**\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n::: center-xy\n::: large-text\n<br> I. Tidyverse <br>\n:::\n:::\n\n## Tidyverse (1)\n\nEl entorno `tidyverse` corresponde a una colección de paquetes de R cuyo diseño está enfocado en el análisis estadístico y la ciencia de datos. Todos los paquetes que forman parte comparten una filosofía de diseño que se traduce en una estructura y gramática común.\n\n- Está diseñado para trabajar con **datos ordenados**:\n  - Cada observación es una fila.\n  - Cada variable es una columna.\n  - Cada celda es un solo valor.\n  \n![](images/tidy_data.png){width=\"350\" height=\"auto\" fig-align=\"center\"}\n\n## Tidyverse (2)\n\n- Código más legible, nombres de funciones más atingentes, gramática común.\n\n:::{.mini-text}\n> \"This is particularly important for R, because it’s a language that’s used primarily by non-programmers, and we want to make it as easy as possible for first-time and end-user programmers to learn the tidyverse.\"\n> -- *Equipo tidyverse*.\n\n:::\n\n- Concatenación de código con el operador operador `|>`.\n\n- Ciclo completo del análisis de datos.\n\n![](images/workflow.png){width=\"350\" height=\"auto\" fig-align=\"center\"}\n\n## Tidyverse (3)\nCuando se instala tidyverse, se instalan una serie de paquetes. Aquellos que pertenecen al núcleo se **cargan** automáticamente cuando se ejecuta `library(tidyverse)`.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n:::{.mini-text}\n- `tibble`: nuevo formato de dataframes con mejoras de visualización.\n- `readr`: lectura de datos \"rectangulares\" como formatos .csv, .tsv, etc.\n- `dplyr`: funciones para el procesamiento y manipulación de datos.\n- `tidyr`: funciones más avanzadas para el procesamiento de datos.\n- `string`: funciones para trabajar con datos tipo string.\n- `forcats`: funciones para trabajar con factores.\n- `ggplot2`: visualización de datos.\n- `purrr`: programación funcional, bucles, código eficiente.\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/tidyverse.png){width=\"450\" height=\"auto\" fig-align=\"center\"}\n\n:::\n\n::::\n\n## Tidyverse (3)\n\nOtros paquetes relevantes que se instalan, pero deben cargarse:\n\n:::{.mini-text}\n- `lubridate`: trabajar con fechas.\n- `readxl`: lectura de datos en formato Excel .xls y .xlsx.\n- `haven`: lectura de datos de programas estadísticos en formato SPSS, Stata y SAS.\n- `glue`: alternativa a `paste()` que facilita combinar datos y strings.\n\nMás información disponible en la [página oficial](https://www.tidyverse.org/).\n:::\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n::: center-xy\n::: large-text\n<br> II. Operador pipe |> <br>\n:::\n:::\n\n## Operador |> (1)\n\n- Expresa de manera clara una secuencia de operaciones concatenando instrucciones de código.\n\n- Pasa el elemento que está a la izquierda como argumento de la función que está a la derecha. \n\n- Disponible desde `R 4.1.0` (mayo 2021). Antes se usaba -y todavía- el operador `%>%`.\n\n- Se puede usar el atajo de teclado `CTRL/CMD + SHIFT + M`. Requiere habilitar `Tools → Global Options → Code → Editing → “Use native pipe operator |>”`\n\n![](images/pipe.png){width=\"450\" height=\"auto\" fig-align=\"center\"}\n\n## Operador |> (2)\n\nVeamos un ejemplo usando el paquete \"guaguas\":\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargamos tidyverse\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- guaguas::guaguas\nhead(data, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n   anio nombre sexo      n proporcion\n  <dbl> <chr>  <chr> <dbl>      <dbl>\n1  1920 María  F      2130     0.104 \n2  1920 José   M       984     0.0483\n3  1920 Juan   M       636     0.0312\n```\n:::\n\n```{.r .cell-code}\ndata |> head(n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n   anio nombre sexo      n proporcion\n  <dbl> <chr>  <chr> <dbl>      <dbl>\n1  1920 María  F      2130     0.104 \n2  1920 José   M       984     0.0483\n3  1920 Juan   M       636     0.0312\n```\n:::\n:::\n\n\n## Operador |> (3)\n\nUsando las funciones de los paquetes que veremos en esta sesión, podemos comparar la sintaxis usando el operador |> versus la prioridad de paréntesis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n  filter(anio == 2020) |>\n  slice_head(n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n   anio nombre  sexo      n proporcion\n  <dbl> <chr>   <chr> <dbl>      <dbl>\n1  2020 Mateo   M      3866     0.0198\n2  2020 Agustín M      2535     0.0130\n3  2020 Sofía   F      2465     0.0126\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_head(filter(data, anio == 2020), n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n   anio nombre  sexo      n proporcion\n  <dbl> <chr>   <chr> <dbl>      <dbl>\n1  2020 Mateo   M      3866     0.0198\n2  2020 Agustín M      2535     0.0130\n3  2020 Sofía   F      2465     0.0126\n```\n:::\n:::\n\n\n    \n## Operador |> (4)\n\n¿Qué código les parece más legible?\n\n![](images/signo_pregunta.png){width=\"10\" height=\"auto\" fig-align=\"center\"}\n\n. . .\n\n- Más legible: va de izquierda a derecha.\n- Evita errores de prioridad de paréntesis.\n- Menos sensible al número de operaciones.\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n::: center-xy\n::: large-text\n<br> III. Paquete dplyr <br>\n:::\n:::\n\n## Paquete dplyr (1)\n\nContiene una serie de funciones para realizar tareas comunes en el procesamiento de datos:\n\n:::{mini-text}\n\n- Explorar los datos: `glimpse()`.\n- Seleccionar variables: `select()`.\n- Filtrar observaciones: `filter()`.\n- Renombrar variables: `rename()`.\n- Ordenar los datos según criterios: `arrange()`.\n- Cambiar orden de las columnas: `relocate()`.\n- Seleccionar observaciones: `slice_head()`, `slice_tail()`, `slice_sample`, etc.\n:::\n\n## Paquete dplyr (2)\n\n:::{mini-text}\n\n- Añadir nuevas variables o modificar las existentes: `mutate()`.\n- Agrupar datos: `group_by()` o argumento `.by`.\n- Estadísticas agrupadas: `summarise()`.\n- Contar: `count()`.\n- Unir conjuntos de datos: familia de mutating y filtering `joins`.\n- Condiciones lógicas: `if_else()` y `case_when()`.\n- Operaciones por filas: `rowwise()`.\n- Identificar filas únicas/distintas: `distinct()`.\n- Transformar a perdidos: `na_if()`.\n- Aplicar operaciones a múltiples columnas: `across()`.\n- ¡Muchas otras!\n:::\n\n## Función glimpse()\n\nPermite obtener una vista rápida del conjunto de datos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 858,782\nColumns: 5\n$ anio       <dbl> 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,…\n$ nombre     <chr> \"María\", \"José\", \"Juan\", \"Luis\", \"Rosa\", \"Ana\", \"Manuel\", \"…\n$ sexo       <chr> \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"M\", \"F\", \"M\", \"M\", \"F\", \"F\",…\n$ n          <dbl> 2130, 984, 636, 631, 426, 340, 326, 289, 277, 269, 239, 218…\n$ proporcion <dbl> 0.10449885, 0.04827552, 0.03120247, 0.03095717, 0.02089977,…\n```\n:::\n:::\n\n\n## Función select() (1)\n\nPermite seleccionar columnas de un conjunto de datos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> select(anio, nombre, n) |> slice_head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n   anio nombre     n\n  <dbl> <chr>  <dbl>\n1  1920 María   2130\n2  1920 José     984\n```\n:::\n:::\n\n\n- Anteponiendo el signo menos `-` se puede hacer selección negativa.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> select(-proporcion, -sexo) |> slice_head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n   anio nombre     n\n  <dbl> <chr>  <dbl>\n1  1920 María   2130\n2  1920 José     984\n```\n:::\n:::\n\n\n\n## Función select() (2)\n\n- También se puede hacer uso de `selection helpers` como `starts_with()`, `ends_with()`, `contains()`, etc.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecciona todo lo que empieza con n\ndata |> select(starts_with(\"n\")) |> slice_head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  nombre     n\n  <chr>  <dbl>\n1 María   2130\n2 José     984\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecciona todo lo que termine con o\ndata |> select(ends_with(\"o\")) |> slice_head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n   anio sexo \n  <dbl> <chr>\n1  1920 F    \n2  1920 M    \n```\n:::\n:::\n\n\n\n## Función select() (2)\n\n- O realizar una selección según el tipo de variable agregando el predicado `where()`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecciona todas las variables character\ndata |> select(where(is.character)) |> slice_head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  nombre sexo \n  <chr>  <chr>\n1 María  F    \n2 José   M    \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecciona todas las variables numeric\ndata |> select(where(is.numeric)) |> slice_head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n   anio     n proporcion\n  <dbl> <dbl>      <dbl>\n1  1920  2130     0.104 \n2  1920   984     0.0483\n```\n:::\n:::\n\n\n- ¡Incluso permite renombrar variables! (Ver notas de la clase).\n\nMás opciones se pueden revisar escribiendo en la consola de R `?select` si se tiene cargado tidyverse.\n\n## Función rename() \n\nPermite renombrar columnas siguiendo la estructura `nuevo_nombre = antiguo_nombre`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Renombra las variables\ndata |> rename(frec = n,\n               prop = proporcion)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 858,782 × 5\n    anio nombre sexo   frec   prop\n   <dbl> <chr>  <chr> <dbl>  <dbl>\n 1  1920 María  F      2130 0.104 \n 2  1920 José   M       984 0.0483\n 3  1920 Juan   M       636 0.0312\n 4  1920 Luis   M       631 0.0310\n 5  1920 Rosa   F       426 0.0209\n 6  1920 Ana    F       340 0.0167\n 7  1920 Manuel M       326 0.0160\n 8  1920 Olga   F       289 0.0142\n 9  1920 Carlos M       277 0.0136\n10  1920 Pedro  M       269 0.0132\n# ℹ 858,772 more rows\n```\n:::\n:::\n\n\n- ¡Noten que aquí aún no se sobreescribe el objeto `data`!\n\n## Función relocate() \n\nCambia la posición de las columnas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Va después de proporcion\ndata |> relocate(anio, .after = proporcion) |>\n  slice_tail(n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  nombre sexo      n proporcion  anio\n  <chr>  <chr> <dbl>      <dbl> <dbl>\n1 Zuri   F         1 0.00000562  2021\n2 Zurick F         1 0.00000562  2021\n3 Zury   F         1 0.00000562  2021\n4 Zyhara F         1 0.00000562  2021\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Va antes de proporcion\ndata |> relocate(anio, .before = proporcion) |>\n  slice_tail(n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  nombre sexo      n  anio proporcion\n  <chr>  <chr> <dbl> <dbl>      <dbl>\n1 Zuri   F         1  2021 0.00000562\n2 Zurick F         1  2021 0.00000562\n3 Zury   F         1  2021 0.00000562\n4 Zyhara F         1  2021 0.00000562\n```\n:::\n:::\n\n\n\n## Función filter() (1)\n\nPermite obtener un subconjunto de los datos a partir de las **condiciones lógicas** especificadas. \n\n:::{.mini-text}\n\n| Símbolo | Significado                                                                                                                                             |\n|---------|---------------------------------------------------------------------------------|\n| `==`     | **Igualdad**. No debe confundirse con “=”, que es un operador de asignación       |\n| `!=`     | **Distinto**                                                                      |\n| `!`       | **Negación** de una expresión lógica                                              |\n| `>`       | **Mayor que**                                                                     |\n| `<`       | **Menor que**                                                                     |\n| `>=`      | **Mayor o igual que**                                                            |\n| `<=`      | **Menor o igual que**                                                             |\n| `%in%`    | Operador de R que indica un **conjunto de elementos**                               |\n| `&`       | Operador **y**. Todas las condiciones evaluadas deben ser verdaderas para que la expresión lo sea|\n| `|`       | Operador **o**. Al menos una condición debe ser verdadera para que la expresión lo sea|\n\n:::\n\n## Función filter() (2)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtro por año\ndata |> filter(anio == 2021) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13,265 × 5\n    anio nombre   sexo      n proporcion\n   <dbl> <chr>    <chr> <dbl>      <dbl>\n 1  2021 Mateo    M      3267     0.0184\n 2  2021 Emma     F      2352     0.0132\n 3  2021 Sofía    F      2251     0.0126\n 4  2021 Isabella F      2155     0.0121\n 5  2021 Lucas    M      2054     0.0115\n 6  2021 Emilia   F      2044     0.0115\n 7  2021 Agustín  M      1972     0.0111\n 8  2021 Benjamín M      1935     0.0109\n 9  2021 Agustina F      1816     0.0102\n10  2021 Santiago M      1809     0.0102\n# ℹ 13,255 more rows\n```\n:::\n:::\n\n\n\n## Función filter() (3)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtro por año y nombre\ndata |> filter(anio == 2021 & nombre == \"Susana\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n   anio nombre sexo      n proporcion\n  <dbl> <chr>  <chr> <dbl>      <dbl>\n1  2021 Susana F        16  0.0000899\n```\n:::\n:::\n\n\n\n## Función filter() (4)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtro usando |\ndata |> filter(anio == 2021 | anio == 2019) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28,306 × 5\n    anio nombre   sexo      n proporcion\n   <dbl> <chr>    <chr> <dbl>      <dbl>\n 1  2019 Mateo    M      4152     0.0196\n 2  2019 Isabella F      3101     0.0147\n 3  2019 Agustina F      2932     0.0139\n 4  2019 Sofía    F      2924     0.0138\n 5  2019 Agustín  M      2869     0.0136\n 6  2019 Santiago M      2658     0.0126\n 7  2019 Emilia   F      2596     0.0123\n 8  2019 Tomás    M      2570     0.0122\n 9  2019 Benjamín M      2537     0.0120\n10  2019 Lucas    M      2468     0.0117\n# ℹ 28,296 more rows\n```\n:::\n:::\n\n\n\n## Función filter() (5)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtro usando %in%\ndata |> filter(anio %in% c(1998, 2006, 2007:2010)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 71,792 × 5\n    anio nombre    sexo      n proporcion\n   <dbl> <chr>     <chr> <dbl>      <dbl>\n 1  1998 Javiera   F      7473     0.0281\n 2  1998 Camila    F      7266     0.0273\n 3  1998 Nicolás   M      6090     0.0229\n 4  1998 María     F      5665     0.0213\n 5  1998 Matías    M      5591     0.0210\n 6  1998 Sebastián M      4726     0.0178\n 7  1998 Catalina  F      4706     0.0177\n 8  1998 Diego     M      4295     0.0161\n 9  1998 José      M      4184     0.0157\n10  1998 Francisca F      3872     0.0145\n# ℹ 71,782 more rows\n```\n:::\n:::\n\n\n\n## Función filter() (6)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtro usando negación\ndata |> filter(anio == 1920 & !(nombre %in% c(\"María\", \"José\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,026 × 5\n    anio nombre sexo      n proporcion\n   <dbl> <chr>  <chr> <dbl>      <dbl>\n 1  1920 Juan   M       636     0.0312\n 2  1920 Luis   M       631     0.0310\n 3  1920 Rosa   F       426     0.0209\n 4  1920 Ana    F       340     0.0167\n 5  1920 Manuel M       326     0.0160\n 6  1920 Olga   F       289     0.0142\n 7  1920 Carlos M       277     0.0136\n 8  1920 Pedro  M       269     0.0132\n 9  1920 Juana  F       239     0.0117\n10  1920 Marta  F       218     0.0107\n# ℹ 2,016 more rows\n```\n:::\n:::\n\n\n\n## Función filter() (7)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> filter(proporcion >= 0.02 & anio > 2014)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n   anio nombre  sexo      n proporcion\n  <dbl> <chr>   <chr> <dbl>      <dbl>\n1  2015 Agustín M      5355     0.0218\n2  2017 Mateo   M      4736     0.0216\n3  2018 Mateo   M      4468     0.0201\n```\n:::\n:::\n\n\n\n## Función filter() (8)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtro usando el paquete stringr y condiciones en paréntesis\ndata |> filter(stringr::str_detect(nombre, \"^X\") & (anio >= 2018 & anio != 2021))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 88 × 5\n    anio nombre  sexo      n proporcion\n   <dbl> <chr>   <chr> <dbl>      <dbl>\n 1  2018 Xiomara F        41 0.000184  \n 2  2018 Ximena  F        27 0.000121  \n 3  2018 Xavier  M         8 0.0000359 \n 4  2018 Xin     F         8 0.0000359 \n 5  2018 Xander  M         3 0.0000135 \n 6  2018 Xavi    M         2 0.00000898\n 7  2018 Xaviera F         2 0.00000898\n 8  2018 Xiang   M         2 0.00000898\n 9  2018 Xabi    M         1 0.00000449\n10  2018 Xaschey F         1 0.00000449\n# ℹ 78 more rows\n```\n:::\n:::\n\n\n## Función arrange() (1)\n\nPermite ordenar los valores a partir de columnas. Por defecto será de manera ascendente.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> arrange(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 858,782 × 5\n    anio nombre    sexo      n proporcion\n   <dbl> <chr>     <chr> <dbl>      <dbl>\n 1  1920 Aaron     M         1  0.0000491\n 2  1920 Abdolina  F         1  0.0000491\n 3  1920 Abdon     M         1  0.0000491\n 4  1920 Abigail   F         1  0.0000491\n 5  1920 Abrahan   M         1  0.0000491\n 6  1920 Abrelena  F         1  0.0000491\n 7  1920 Accidalia F         1  0.0000491\n 8  1920 Acencio   M         1  0.0000491\n 9  1920 Adalia    F         1  0.0000491\n10  1920 Adelino   M         1  0.0000491\n# ℹ 858,772 more rows\n```\n:::\n:::\n\n\n\n## Función arrange() (2)\n\nCon la función `desc()` se puede ordenar de manera descendente.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ordena por año ascendente y por frecuencia descendente\ndata |> filter(nombre %in% c(\"Andrea\", \"Alberto\")) |> \n  arrange(anio, desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 218 × 5\n    anio nombre  sexo      n proporcion\n   <dbl> <chr>   <chr> <dbl>      <dbl>\n 1  1920 Alberto M        53   0.00260 \n 2  1920 Andrea  F         8   0.000392\n 3  1921 Alberto M       130   0.00282 \n 4  1921 Andrea  F        19   0.000412\n 5  1922 Alberto M       121   0.00249 \n 6  1922 Andrea  F        19   0.000391\n 7  1923 Alberto M       168   0.00332 \n 8  1923 Andrea  F        14   0.000276\n 9  1924 Alberto M       137   0.00247 \n10  1924 Andrea  F        25   0.000451\n# ℹ 208 more rows\n```\n:::\n:::\n\n\n\n## Función slice() (1)\n\nPermite seleccionar filas basadas en su posición. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> slice(20) # Selecciona la fila en la posición 20\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n   anio nombre    sexo      n proporcion\n  <dbl> <chr>     <chr> <dbl>      <dbl>\n1  1920 Margarita F       146    0.00716\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> slice(20:22) # Selecciona filas desde la 20 a 22\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n   anio nombre    sexo      n proporcion\n  <dbl> <chr>     <chr> <dbl>      <dbl>\n1  1920 Margarita F       146    0.00716\n2  1920 Héctor    M       138    0.00677\n3  1920 Julio     M       134    0.00657\n```\n:::\n:::\n\n\n\n## Función slice() (2)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> slice(-(1:800000)) # Selecciona todas menos desde la 1 a 800.000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58,782 × 5\n    anio nombre     sexo      n proporcion\n   <dbl> <chr>      <chr> <dbl>      <dbl>\n 1  2017 Widekenley M         1 0.00000456\n 2  2017 Wideleïca  F         1 0.00000456\n 3  2017 Wideleyca  F         1 0.00000456\n 4  2017 Widelini   F         1 0.00000456\n 5  2017 Widelka    F         1 0.00000456\n 6  2017 Widenaëlle F         1 0.00000456\n 7  2017 Widialine  F         1 0.00000456\n 8  2017 Widjina    F         1 0.00000456\n 9  2017 Widjinaïca F         1 0.00000456\n10  2017 Widlanne   F         1 0.00000456\n# ℹ 58,772 more rows\n```\n:::\n:::\n\n\n\n## Función slice() (3)\n\nTambién cuenta con las funciones `slice_head()` y `slice_tail()`. Además del argumento `n`, incluye el argumento `prop` para seleccionar una proporción de filas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> slice_head(n = 2) # 2 Filas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n   anio nombre sexo      n proporcion\n  <dbl> <chr>  <chr> <dbl>      <dbl>\n1  1920 María  F      2130     0.104 \n2  1920 José   M       984     0.0483\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> slice_tail(prop = 0.01) # Partiendo desde las últimas filas, el 1%\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,587 × 5\n    anio nombre    sexo      n proporcion\n   <dbl> <chr>     <chr> <dbl>      <dbl>\n 1  2021 Amenadil  M         1 0.00000562\n 2  2021 Amets     F         1 0.00000562\n 3  2021 Ameyalin  F         1 0.00000562\n 4  2021 Ameyalli  F         1 0.00000562\n 5  2021 Amiel     F         1 0.00000562\n 6  2021 Amien     M         1 0.00000562\n 7  2021 Amillaray F         1 0.00000562\n 8  2021 Amin      M         1 0.00000562\n 9  2021 Amina     F         1 0.00000562\n10  2021 Amirha    F         1 0.00000562\n# ℹ 8,577 more rows\n```\n:::\n:::\n\n\n\n## Función slice() (4)\n\nCon `slice_sample` se puede seleccionar una muestra aleatoria de casos, ya sea indicando con el argumento `n` o con `prop`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> slice_sample(n = 1) # Un caso al azar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n   anio nombre sexo      n proporcion\n  <dbl> <chr>  <chr> <dbl>      <dbl>\n1  1997 King   M         1 0.00000368\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> slice_sample(prop = 0.01) # Una muestra del 1% al azar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,587 × 5\n    anio nombre   sexo      n proporcion\n   <dbl> <chr>    <chr> <dbl>      <dbl>\n 1  2009 Reachel  F         1 0.00000395\n 2  1991 Ivian    F         1 0.00000332\n 3  2001 Yanneri  F         1 0.00000398\n 4  1963 Bairon   M         1 0.0000035 \n 5  1967 Yilian   F         2 0.00000653\n 6  1969 Vivianna F         1 0.00000349\n 7  2020 Aleydis  F         1 0.00000513\n 8  1990 Lilibet  F         3 0.00000973\n 9  1930 Radame   M         1 0.0000107 \n10  2005 Aleens   F         1 0.00000429\n# ℹ 8,577 more rows\n```\n:::\n:::\n\n\n\n## Función count()\n\nCuenta las observaciones únicas en una o más variables. Por ejemplo, si quisieramos saber cuántos casos hay por año.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> count(anio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 102 × 2\n    anio     n\n   <dbl> <int>\n 1  1920  2028\n 2  1921  3094\n 3  1922  3241\n 4  1923  3344\n 5  1924  3526\n 6  1925  3544\n 7  1926  3649\n 8  1927  3902\n 9  1928  4511\n10  1929  4531\n# ℹ 92 more rows\n```\n:::\n:::\n\n\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n::: center-xy\n::: large-text\n<br> IV. Aplicación <br>\n:::\n:::\n\n## Aplicación (1)\n\n![](images/noticia.png){width=\"450\" height=\"auto\" fig-align=\"center\"}\n\n## Aplicación (2)\n\n¿Cómo han evolucionado los nombres María y Sofía a lo largo del tiempo?\n\nFuentes: \n\n1. Opción 1: paquete `showtext`.\n2. Opción 2: paquete `extrafont`.\n\nPara descargar una fuente específica pueden usar todas las de libre uso disponibles en [Google Fonts](https://fonts.google.com/).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(showtext)) install.packages(\"showtext\")\nif (!require(extrafont)) install.packages(\"extrafont\")\nlibrary(showtext) # Paquete para llamar fuentes desde google\nlibrary(ggplot2) # Visualización de datos\nlibrary(extrafont) # Instala fuentes del sistema en R\nfont_add_google(\"Noto Sans\")\nfont_add_google(\"Montserrat\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importa todos los archivos .ttf de tu sistema\n# Se ejecuta una vez, pero demora\nfont_import()\n# Cargar todas las fuentes\nloadfonts(device = \"win\", quiet = TRUE) # Método para Windows\n```\n:::\n\n\n\n## Aplicación (3)\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\ndata |> filter(nombre == \"María\" & sexo == \"F\") |>\n  ggplot(aes(x = anio, y = proporcion)) +\n  geom_line(size = 1, colour = \"#0bb4ff\") +\n  geom_area(alpha = 0.3, fill = \"#0bb4ff\") +\n  scale_x_continuous(breaks = seq(min(data$anio), max(data$anio), by = 10)) + \n  scale_y_continuous(labels = scales::percent) +\n  annotate(\"text\", x = 2000, y = 0.05, size = 5,\n          label = \"La proporción \\n va a la baja\", color = \"black\") +\n  labs(title = \"Popularidad del nombre María entre 1920 - 2021\", x = NULL, y = NULL,\n       caption = \"Datos 1920 - 2021 según Registro Civil e Identificación.\") +\n   theme(text = element_text(family = \"Noto Sans\"),\n        plot.title = element_text(color = \"#0bb4ff\", face = \"bold\"),\n        plot.caption = element_text(size = 8, face = \"italic\", color = \"azure4\"))\n```\n\n::: {.cell-output-display}\n![% respecto del total de nacimientos registrados por año](clase_3_presentación_files/figure-html/fig-plot-maria-1.png){#fig-plot-maria fig-align='center' width=672}\n:::\n:::\n\n\n\n## Aplicación (4)\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\ndata |> filter(nombre == \"Sofía\" & sexo == \"F\") |>\n  ggplot(aes(x = anio, y = proporcion)) +\n  geom_line(size = 1, colour = \"#f46a9b\") +\n  geom_area(alpha = 0.3, fill = \"#f46a9b\") +\n  scale_x_continuous(breaks = seq(min(data$anio), max(data$anio), by = 10)) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Popularidad del nombre Sofía entre 1920 - 2021\", x = NULL, y = NULL,\n       caption = \"Datos 1920 - 2021 según Registro Civil e Identificación.\") +\n  theme_classic() +\n  theme(text = element_text(family = \"Montserrat\"),\n        plot.title = element_text(color = \"#f46a9b\", face = \"bold\"),\n        plot.caption = element_text(size = 8, face = \"italic\", color = \"azure4\"))\n```\n\n::: {.cell-output-display}\n![% respecto del total de nacimientos registrados por año](clase_3_presentación_files/figure-html/fig-plot-sofia-1.png){#fig-plot-sofia fig-align='center' width=672}\n:::\n:::\n\n\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n::: center-xy\n::: large-text\n<br> V. Ejercicio <br>\n:::\n:::\n\n## Ejercicio\n\nUsando el conjunto de datos de `guaguas` responda lo siguiente:\n\n1. ¿Hay alguna persona que se llame \"Nicki\" o \"Nicky\"?\n2. ¿Cuáles son los tres nombres más populares para las personas inscritas en el año 2021?\n3. ¿Cuántas personas con el nombre \"Pedro\" fueron inscritas entre 2015 - 2017 y el año 2020?\n4. ¿Hay alguna persona que se llame \"Ibai\" antes de 2017?\n5. ¿Cuántas personas con nombre Andrea y sexo registral masculino hay en el conjunto de datos?\n6. Realice su propia búsqueda. Debe cumplir al **menos** uno de los siguientes requisitos:\n    - Incluir uno o más años y uno o más nombres.\n    - Realizar una búsqueda con criterio de exclusión. \n  \n\n##  {background-color=\"rgb(25,25,25)\"}\n\n::: center-xy\n::: large-text\n<br> ¡Gracias! <br> <https://sirojasv.github.io/tsm_web/>\n:::\n:::\n\n\n\n\n\n\n<script src=\"script.js\"></script>",
    "supporting": [
      "clase_3_presentación_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}