{
  "hash": "d48a3199414b07f3bdf41b86ba89cf98",
  "result": {
    "markdown": "---\n# Title & Author\ntitle: \"Introducci√≥n a R\"\nsubtitle: | \n    | Metodolog√≠a Cuantitativa - TSM301\n    | Clase 1\nauthor: \"Sebasti√°n Rojas Vergara - sirojas1@uc.cl\"\n#institute:\n#order:\ndate: 08/23/2023\ndate-format: \"dddd D MMMM, YYYY\"\n# Format Options\nformat:\n  revealjs: \n    slide-number: true\n    transition: slide\n    transition-speed: slow\n    #chalkboard: \n      #buttons: false\n    smaller: true\n    controls: true\n    toc: false\n    number-sections: false\n    fig-dpi: 400\n    fig-responsive: true\n    embed-resources: true\n    preview-links: auto\n    theme: [dark, aquamarine.scss]\n    logo: images/logo_puc_bn.png\n    css: styles.css\n    footer: \"Metodolog√≠a Cuantitativa - 2023\"\ncomments: false\nexecute: \n  echo: true\n---\n\n\n\n## Contenidos\n\n**I. ¬øQu√© es R?**\n\n**II. ¬øPor qu√© usar R?**\n\n**III. Iniciando R**\n\n**IV. Bases de R**\n\n**V. Comentando Scripts**\n\n\n##  {background-color=rgb(25,25,25)}\n\n::: {.center-xy}\n\n<div class=\"large-text\">\n<br>\nI. ¬øQu√© es R? <br>\n</div>\n:::\n\n## ¬øQu√© es R? (1)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n- R es un lenguaje de programaci√≥n para la computaci√≥n estad√≠stica y la visualizaci√≥n creado por Robert Gentleman y Ross Ihaka, profesores de estad√≠stica de la Universidad de Auckland en Nueva Zelanda. \n\n- Tiene la ventaja de ser **gratuito** y **libre**. \n\n- Una forma de contribuir al desarrollo de R es mediante la creaci√≥n de un **paquete**.\n\n- Implica escribir c√≥digo, que es la manera que tenemos de comunicarnos con el lenguaje.\n\n- Lo usaremos a trav√©s del IDE RStudio.\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n![](images/logo_r.png){width=200 height=auto fig-align=center}\n\n![](images/logo_rstudio.png){width=400 height=auto fig-align=center}\n\n:::\n\n:::\n\n##  {background-color=rgb(25,25,25)}\n\n::: {.center-xy}\n\n<div class=\"large-text\">\n<br>\nII. ¬øPor qu√© usar R? <br>\n</div>\n:::\n\n## ¬øPor qu√© usar R? Caracteristicas (1)\n\n- **Gratuito**. A diferencia de otros softwares de ciencias sociales (v.g. SPSS) o el propio Excel.\n\n- **Libre**. Permite que la comunidad introduzca nuevas funciones al software.\n\n- **Potencia**. Permite articular de mejor forma el procesamiento, an√°lisis, visualizaci√≥n y reporter√≠a de datos.\n\n- **Campo de aplicaci√≥n**. Estad√≠stica, negocios, ciencia de datos, ciencias naturales, etc.\n\nPero tambi√©n tiene desventajas ü•∫\n\n- Curva de aprendizaje empinada.\n\n- No est√° pensado para ejecutar comandos por interfaz gr√°fica, lo que puede ser dif√≠cil para algunas personas.\n\n## ¬øPor qu√© usar R? Crecimiento (2)\n\nEl uso de `R` ha aumentado durante los √∫ltimos 15 a√±os. Este fen√≥meno se ha replicado en las ciencias sociales.\n\n![](images/tiobe_r.png){width=1600 height=auto fig-align=center}\n\n##  {background-color=rgb(25,25,25)}\n\n:::{.center-xy}\n\n<div class=\"large-text\">\n<br>\nIII. Iniciando R <br>\n</div>\n:::\n\n## RStudio\n\nAl abrir `RStudio` se encontrar√°n con tres paneles:\n\n- La **Consola** marcada por el recuadro color <span class=\"fondo-gris\" style = \"color:#800080\">lila</span>\n\n- El **Enviroment** o ambiente de trabajo en un color <span class=\"fondo-gris\" style = \"color:#FA8072\">salm√≥n</span>\n\n- Las **Utilidades** en color <span class=\"fondo-gris\" style = \"color:#228B22\">verde</span>\n\n![](images/panel_rstudio.png){width=1200 height=auto fig-align=center}\n\n## Comenzar un script\n\nLos comandos que ejecutaremos directamente en la consola no mantienen un registro, por lo que usaremos un `Script` de R para conservar el c√≥digo. Para iniciar un Script tenemos dos alternativas:\n\n1. Seleccionar **`File ‚Üí New File ‚Üí R Script`**\n\n2. Usar el atajo de teclado **`CTRL/CMD + SHIFT + N`**\n\nLa forma m√°s sencilla de utilizar `R` ser√≠a como una calculadora:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Esto es una suma\n\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n## Atajos relevantes para correr scripts\n\n- **`CTRL/CMD + ENTER ‚Üí`** Ejecuta la l√≠nea que tienen seleccionada en el curso\n- **`CTRL/CMD + SHIFT + ENTER ‚Üí`** Ejecuta todo el c√≥digo\n- **`CTR/CMD + L ‚Üí`** Limpia toda la consola de resultados de R\n- **`CTRL/CMD + S ‚Üí`** Guarda el script. Si este no tiene nombre, primero pedir√° guardarlo en un directorio y asignarle nombre\n\n##  {background-color=rgb(25,25,25)}\n\n:::{.center-xy}\n\n<div class=\"large-text\">\n<br>\nIV. Bases de R <br>\n</div>\n:::\n\n## C√°lculos en R\n\nEs posible usar R como una calculadora. Las operaciones m√°s utilizadas son las siguientes\n\n|   | **Operaci√≥n**|\n|---|---|\n|`+`|Suma|\n|`-`|Resta|\n|`*`|Multiplicaci√≥n|\n|`/`|Divisi√≥n|\n|`^`|Potencia|\n|`sqrt` |Ra√≠z cuadrada|\n|`log()`|Logaritmo base|\n\n## Objetos en R\n\n- En R podemos crear objetos que guarden informaci√≥n o resultados. Para ello, se escribe el nombre y se les asigna los valores con el operador **`<-`**.\n\n- Los nombres permiten representar resultados de manera m√°s f√°cil. Ejemplo:\n\n  1. Ingresamos tres notas y las dividimos por 3. Este resultado queda guardado en el objeto llamado **\"promedio\"**.\n\n  2. Luego, si queremos ver el resultado, basta con llamar al objeto **promedio**.\n\n  3. Si el nombre del objeto ya existe, se sobreescribir√° su contenido.\n   \n\n::: {.cell}\n\n```{.r .cell-code}\n# Guardamos esta operaci√≥n matem√°tica en un objeto llamado \"promedio\"\n\npromedio <- (5.5  + 3.8 + 6.1) / 3\n```\n:::\n\n\n## Nombrar objetos\n\n- Evite caracteres especiales como tildes, √±, espacios, etc.\n\n- Consistencia en los nombres de variables. Puede usar nomenclaturas como **Snake Case** donde los nombres se escriben en el formato \"nombre_objeto\" o **Camel Case** que sigue el est√°ndar \"NombreObjeto\".\n\n- Recordar que R es sensible a may√∫sculas y min√∫sculas. En el ejemplo anterior, definimos el objeto **`promedio`**. Si escribi√©ramos **`Promedio`** el software no lo reconocer√°.\n\n## Estructuras de datos\n\n- R cuenta con clases y tipos de datos definidos de antemano, los cuales dependen de la informaci√≥n que contengan en su interior. Los comandos **`class`** y **`typeof`** sirven para preguntar el tipo de cada elemento.\n\n- En la siguiente tabla se muestran algunas de las clases m√°s frecuentes en R.\n\n::: {.mini-text}\n| **Tipo**  |**Descripci√≥n**|**Ejemplo**\n| ---- |----------------|------------------------------------|\n|`integer`|N√∫meros enteros|-1, 0, 1|\n|`numeric`|N√∫meros reales|-0.5, 1/2, 1|\n|`character`|Texto/String|\"Erwin\", \"Armin\", \"Sasha\", \"Titanes\"|\n|`factor`|Datos categ√≥ricos|\"Trabajo Social [1]\", \"Otra carrera [2]\"|\n|`haven_labelled`|Valores num√©ricos con etiquetas asociadas|1 = \"Muy en desacuerdo\"; 2 = \"En desacuerdo\"; 3 \"Ni de acuerdo ni en desacuerdo\"; 4 = \"De acuerdo\"; 5 \"Muy de acuerdo\"|\n|`logical`|Verdadero o falso|\"TRUE\", \"FALSE\"|\n:::\n\n## Vectores (1)\n\nLos **vectores** son ordenamientos unidimensionales que solo pueden contener un tipo de dato. Se definen con el comando **`c()`**.\n\nLos vectores tienen valores y adem√°s una posici√≥n (index) asociada a cada valor. Esta comienza desde el n√∫mero 1 en adelante.\n\n![](images/vectores.png){width=150 height=auto fig-align=center}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv_numerico <- c(1, 3, 5, 7, 9) # Vector que solo contiene n√∫meros\nclass(v_numerico)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## Vectores (2)\n\n- Un vector solamente puede contener caracteres o solamente puede contener n√∫meros. En los casos en que se produzca una mezcla, R realizar√° una transformaci√≥n en los datos para que contengan solo un tipo de dato.  \n\nCon el comando `class()` y `typeof()` se puede obtener informaci√≥n sobre los objetos\n\n- `class()` nos dir√° de qu√© clase es el objeto. Para este curso, de preferencia usaremos este.\n\n- `typeof()` nos dir√° el modo de almacenamiento de ese objeto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(v_numerico)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(v_numerico)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n## Vectores (3)\n\n- Si un vector contiene m√°s de un tipo de dato, el programa forzar√° a que todos los datos sean del mismo tipo. Este proceso se conoce como **coerci√≥n**. \n\n- Noten que si el texto est√° entre comillas, el programa lo reconocer√° como un caracter. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nejemplo_character <- \"Soy un character inocente\"\n\nclass(ejemplo_character)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(ejemplo_character)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nv_char <- c(40, \"50 a√±os\", 33, \"33\") # Las comillas indican que es texto\n\n\n# ¬øY si comprobamos la clase del √∫ltio vector que generamos?\n\n# ¬°Pregunta! ¬øPor qu√© es de clase character?\nclass(v_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(v_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Vectores (4)\n\nEs posible acceder a cualquier elemento de un vector a trav√©s de su posici√≥n usando la notaci√≥n **`[]`**[^1].\n\n::: {.mini-mini-text}\n\n[^1]: Nota: si tienen problemas para escribirlos con el teclado, pueden usar `ALT + 91` para [ y `ALT + 93` para ]. Usualmente con solo escribir uno R deber√≠a autocompletar.\n\n\n:::\n\nRespondamos algunas preguntas:\n\n- ¬øDe qu√© tipo es este vector?\n\n- ¬øCu√°ntos elementos o qu√© largo tiene este vector?\n\n- ¬øC√≥mo puedo acceder al primer elemento del vector?\n\n- ¬øC√≥mo puedo acceder a los dos primeros elementos del vector?\n\n- ¬øC√≥mo puedo acceder a la √∫ltima posici√≥n, sin saber su largo a priori?\n\n\n## Vectores (5)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndespedida <- c(\"Eren\", \"Mikasa\", \"Armin\", \"Gracias por todo\",\n              \"Casi terminas :/\", \"Este 2023\")\n\nclass(despedida)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nlength(despedida)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\ndespedida[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Eren\"\n```\n:::\n\n```{.r .cell-code}\ndespedida[1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Eren\"   \"Mikasa\"\n```\n:::\n\n```{.r .cell-code}\ndespedida[length(despedida)] # length es una funci√≥n de R que entrega el largo de un vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Este 2023\"\n```\n:::\n:::\n\n\n## Matrices (1)\n\n- Las **matrices** son estructuras bidimensionales, pues tienen filas y columnas, pero donde solo puede existir un tipo de dato. Se crean con el comando **`matrix()`**. Este comando sigue la siguiente estructura:\n\n**`matrix(vector, nrow = n, ncol = m, byrow = FALSE)`**\n\n  - Primero se especifican los datos de la matriz.\n  - Luego se especifica el n√∫mero de filas.\n  - Luego se especifica el n√∫mero de columnas.\n  - El argumento byrow puede tomar dos valores. Si es FALSE, la matriz se llenar√° por columnas, es decir, completar√° una columna y luego continuar√° con los valores. Si el argumento es TRUE, se llenar√° por filas, es decir, completar√° una fila y luego pasar√° a la siguiente. El valor por defecto siempre es FALSE para esta funci√≥n.\n\n## Matrices (2)\n\nEjemplo de llenado por columnas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz_1 <- matrix(1:9, ncol = 3) # Llenado por columnas\nmatriz_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n:::\n\nEjemplo de llenado por filas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz_2 <- matrix(1:9, ncol = 3, byrow = TRUE) # Llenado por filas\nmatriz_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n:::\n:::\n\n\n## Acceder a elementos\n\n- En R las matrices siempre siguen el orden (filas, columnas). Con esta l√≥gica se puede seleccionar sus elementos: **`mi_matriz[i, j] ~ i = filas, j = columnas`**.\n\n   - **`mi_matriz[i, ]`**: selecciona la **fila** i-√©sima de la matriz.\n   - **`mi_matriz[, j]`**: selecciona la **columna** j-√©sima de la matriz.\n   - **`mi_matriz[i, j]`**: selecciona el j-√©simo elemento de la i-√©sima fila\n   \nRealicemos un ejemplo con la `matriz_2`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatriz_2[1, 1] # Estoy seleccionando la fila 1 columna 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nmatriz_2[2, 1] # Estoy seleccionando la fila 2 columna 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nmatriz_2[1, ] # Estoy seleccionando a toda la fila 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nmatriz_2[3, ] # Estoy seleccionando a toda la fila 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7 8 9\n```\n:::\n\n```{.r .cell-code}\nmatriz_2[, 1] # Estoy seleccionando a toda la columna 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 7\n```\n:::\n:::\n\n\n## Dataframe y tibble (1)\n\nEn R los **dataframe** son arreglos de datos bidimensionales (filas y columnas), pero que permiten distintos tipos de datos.\n\nEs el caso usual de datos estructurados que se ven en los cursos de an√°lisis de datos: las filas representan observaciones y las columnas variables.\n\nLos **tibbles** son muy similares a los dataframe, pero con mejoras de calidad de vida. La funci√≥n proviene del paquete **`tidyverse`**.\n\nLos dataframes se generan a trav√©s de la funci√≥n **`data.frame()`**, mientras que los tibbles con **`tibble()`**.\n\nPara trabajar con tibbles, requeriremos un paso previo antes üòÆ\n\n## Instalaci√≥n de paquetes\n\n- Los paquetes permiten agregar funciones adicionales a R. Para su instalaci√≥n, debemos usar el comando **`install.packages(\"nombrepaquete\")`**. \n\n- Se debe tener mucho cuidado con especificar de manera correcta el comando, o arrojar√° error.\n\n- Para utilizar el paquete ya instalado, en la sesi√≥n actual, se debe utilizar el comando **`library(\"nombrepaquete\")`**.\n\n- Prueben instalando y llamando el paquete **`tidyverse`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# O un c√≥digo m√°s elegante, donde se instala solo si no lo tiene\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cuando el paquete ya est√° instalado, se debe ejecutar library()\n\nlibrary(tidyverse)\n```\n:::\n\n\n## Dataframe y tibble (2)\n\n- En los tibbles y dataframes uno tambi√©n puede seleccionar directamente filas o columnas. Para ello, existen dos opciones:\n\n- Usar la notaci√≥n de `$` para acceder a columnas espec√≠ficas.\n\n- Usar la notaci√≥n de `[[]]` para acceder a columnas espec√≠ficas.\n\n- Usar la notaci√≥n de matrices `[i, j]` para acceder a filas y columnas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombre_base$nombre_variable\nnombre_base[i, j]\nnombre_base[[]]\n```\n:::\n\n\n## Generando un tibble (1)\n\nPara este ejemplo crearemos tres vectores y luego los guardaremos como un tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombre <- c(\"Constanza\", \"Sofia\", \"Gonzalo\")\ncarrera <- c(\"Ingenier√≠a\", \"Administraci√≥n\", \"Arqueolog√≠a\")\ngen <- c(2013, 2018, 2023)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generando una base de datos con comando data.frame\ndata_estudiantes_df <- data.frame(nombre, carrera, gen)\n\ndata_estudiantes_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     nombre        carrera  gen\n1 Constanza     Ingenier√≠a 2013\n2     Sofia Administraci√≥n 2018\n3   Gonzalo    Arqueolog√≠a 2023\n```\n:::\n\n```{.r .cell-code}\n# Generando una base de datos con comando tibble\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\n# Con este c√≥digo el programa instalar√° el paquete\n# solo si no lo tiene\n\nlibrary(tidyverse)\n```\n:::\n\n\n## Generando un tibble (2)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_estudiantes_tb <- tibble(nombre, carrera, gen)\n\ndata_estudiantes_tb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 3\n  nombre    carrera          gen\n  <chr>     <chr>          <dbl>\n1 Constanza Ingenier√≠a      2013\n2 Sofia     Administraci√≥n  2018\n3 Gonzalo   Arqueolog√≠a     2023\n```\n:::\n\n```{.r .cell-code}\n# Con el comando View() con la primera en may√∫scula, ver√°n este tibble en RStudio.\n\nView(data_estudiantes_tb)\n```\n:::\n\n\n## Acceder a elementos del tibble  (1)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_estudiantes_tb$nombre # accedemos a la columna nombre con $. Esto devuelve un vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[\"nombre\"] # accedemos a la columna nombre con []. Esto devuelve un tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 1\n  nombre   \n  <chr>    \n1 Constanza\n2 Sofia    \n3 Gonzalo  \n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[[\"nombre\"]] # accedemos a la columna nombre con[[]] Esto devuelve un vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[[1]] # accedemos a la columna nombre con notaci√≥n por posici√≥n [[]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Constanza\" \"Sofia\"     \"Gonzalo\"  \n```\n:::\n:::\n\n\n## Acceder a elementos del tibble (2)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_estudiantes_tb[1, \"nombre\"] # accedemos a la fila 1 de la columna nombre\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 √ó 1\n  nombre   \n  <chr>    \n1 Constanza\n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[1:2, \"nombre\"] # accedemos a la fila 1 y 2 de la columna nombre\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 √ó 1\n  nombre   \n  <chr>    \n1 Constanza\n2 Sofia    \n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[[3, 1]] # Accedemos a la columna 3, fila 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Gonzalo\"\n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[1,] # Accedemos a toda la fila 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 √ó 3\n  nombre    carrera      gen\n  <chr>     <chr>      <dbl>\n1 Constanza Ingenier√≠a  2013\n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[1,3] # Accedemos a la fila 1 columna 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 √ó 1\n    gen\n  <dbl>\n1  2013\n```\n:::\n:::\n\n\n## Acceder a elementos del tibble (3)\n\nAcceder de manera negativa o excluyendo elementos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_estudiantes_tb[, -c(1)] # accedemos a todas las columnas menos nombre, por posici√≥n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 2\n  carrera          gen\n  <chr>          <dbl>\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[, -c(1:2)] # accedemos a todas las columnas menos la 1 y la 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 1\n    gen\n  <dbl>\n1  2013\n2  2018\n3  2023\n```\n:::\n\n```{.r .cell-code}\ndata_estudiantes_tb[, names(data_estudiantes_tb) != \"nombre\"] # accedemos a todas las columnas menos nombre\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 2\n  carrera          gen\n  <chr>          <dbl>\n1 Ingenier√≠a      2013\n2 Administraci√≥n  2018\n3 Arqueolog√≠a     2023\n```\n:::\n:::\n\n\n## Acceder a elementos del tibble (4)\n\nAcceder de manera negativa o excluyendo elementos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_estudiantes_tb[, !names(data_estudiantes_tb) %in% c(\"nombre\", \"carrera\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 1\n    gen\n  <dbl>\n1  2013\n2  2018\n3  2023\n```\n:::\n:::\n\n\n## Seccionar un script \n\nSe puede establecer un orden de t√≠tulos y subt√≠tulos que ordenen el script mediante el siguiente esquema:\n\n   - **#** y cuatro guiones medios indican una secci√≥n.\n   - **##** y cuatro guiones medios indican una subsecci√≥n anidada a la secci√≥n.\n   - **###** y cuatro guiones medios indican una sub-subsecci√≥n.\n   \n\n::: {.cell}\n\n```{.r .cell-code}\n# Proceso 1 ----\n\n## Subproceso 1.1 ----\n\n### Sub-subproceso 1.1.1 ----\n```\n:::\n\n\nPara ver la barra de navegaci√≥n utilizamos el atajo **`CTRL/CMD + SHIFT + O`**.\n\n---\n\n## Guardar un script\n   \n- Si queremos guardar este script, tenemos tres alternativas:\n\n   1. Seleccionar el √≠cono de disquette que est√° sobre el script.\n   \n   2. Ir a **`File ‚Üí Save`**.\n   \n   3. Usar el atajo **`CTRL/CMD + S`**.\n   \n- Por √∫ltimo, tener en cuenta que RStudio cuenta con **autocompletado** y un **diagn√≥stico de errores** (aparecer√° un √≠cono con una marca roja en forma de \"x\" en la l√≠nea donde hay problemas).\n\n\n##  {background-color=rgb(25,25,25)}\n\n:::{.center-xy}\n\n<div class=\"large-text\">\n<br>\n¬°Gracias! <br>\n[https://sirojasv.github.io/tsm_web/](https://sirojasv.github.io/tsm_web/)\n</div>\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}