{
  "hash": "637e382996d2bfc6ac499264b8168839",
  "result": {
    "markdown": "---\n# Title & Author\ntitle: \"Tipos y estructuras de datos en R\"\nsubtitle: | \n    | Metodología Cuantitativa - TSM301\n    | Clase 2\nauthor: \"Sebastián Rojas Vergara - sirojas1@uc.cl\"\n#institute:\n#order:\ndate: 08/30/2023\ndate-format: \"dddd D MMMM, YYYY\"\n# Format Options\nformat:\n  revealjs: \n    slide-number: true\n    transition: slide\n    transition-speed: slow\n    #chalkboard: \n      #buttons: false\n    smaller: true\n    controls: true\n    toc: false\n    number-sections: false\n    fig-dpi: 400\n    fig-responsive: true\n    embed-resources: true\n    preview-links: auto\n    theme: [dark, aquamarine.scss]\n    logo: images/logo_puc_bn.png\n    css: styles.css\n    footer: \"Metodología Cuantitativa - 2023\"\ncomments: false\nexecute: \n  echo: true\n---\n\n\n\n## Contenidos\n\n**I. Clase anterior**\n\n**II. Tibbles**\n\n**III. Tipos de datos**\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n:::{.center-xy}\n:::{.large-text}\n<br> I. Clase anterior <br>\n:::\n:::\n\n## Clase anterior\n\n1.  Concepto de objeto en `R`.\n\n2.  Vectores, matrices, dataframes/tibbles.\n\n3.  Instalación de paquetes.\n\n4.  Buenas prácticas para comentar código.\n\n## Glosario\n\n:::{.mini-text}\n| Concepto                | Descripción                                                                                                                                                                                                         |\n|--------------------|----------------------------------------------------|\n| `Consola`    | Lugar donde se puede escribir código y que retorna o \"imprime\" los resultados asociados a ese código.                                                                                                               |\n| `Script`                | Archivo de texto o programa que incluye el código que queremos ejecutar.                                                                                                                                            |\n| `Directorio de trabajo` | En inglés *working directory*. Indica la ubicación de los archivos de entrada y salida.                                                                                                                             |\n| `Función`               | Conjunto de instrucciones que convierten las entradas o *inputs* en los resultados u *outputs* esperados. Las funciones tienen **argumentos**, que son las entradas que necesita o especificaciones para funcionar. |\n| `Paquetes`              | Conjunto de funciones agrupadas y distribuidas mediante una librería diseñadas para temas específicos. Por ejemplo, paquetes para visualizar datos.                                                                 |\n| `Vector`                | Unidad básica de datos en R.                                                                                                                                                                                        |\n| `Dataframe o tibble`    | Tabla organizada mediante filas y columnas.                                                                                                                                                                         |\n:::\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n:::{.center-xy}\n:::{.large-text}\n<br> II. Tibbles <br>\n:::\n:::\n\n## Tibbles/dataframes\n\nUna característica relevante de los tibbles/dataframes es que cada columna o variable corresponde a un vector. Esto permite aplicar una serie de funciones que están disponibles para vectores, tales como:\n\n:::{.mini-text}\n-   `sum()`: retorna la suma de elementos\n\n-   `mean()`: retorna la media aritmetica.\n\n-   `median()`: retorna la mediana.\n\n-   `sd()`: retorna la desviación estándar:\n\n-   `max()`: retorna el valor máximo.\n\n-   `min()`: retorna el valor mínimo.\n\n-   `which.max()`: retorna la posición del valor máximo.\n\n-   `which.min()`: retorna la posición del valor mínimo.\n\n-   `range()`: retorna el rango.\n\n-   `rev()`: revierte el orden de los elementos.\n\n-   `unique()`: retorna la lista de elementos únicos.\n\n-   `length()`: retorna el largo.\n:::\n\n## Datos de ejemplo:\n\nUsaremos el paquete guaguas. Este contiene el primer nombre de los bebés registrados en Chile entre 1920 y 2021 según el Servicio de Registro Civil e Identificación.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargamos el paquete\nif (!require(\"guaguas\")) install.packages(\"guaguas\")\nlibrary(guaguas)\n```\n:::\n\n\n\nLa base de datos contiene 858.782 observaciones para cinco variables, las cuales se describen a continuación:\n\n:::{.mini-text}\n| Nombre     | Descripción                                                              |\n|----------------|--------------------------------------------------------|\n| anio       | Año de inscripción en el Servicio de Registro Civil e Identificación     |\n| nombre     | Primer nombre inscrito de la persona                                     |\n| sexo       | Sexo registral, con categorías \"Femenino\", \"Masculino\" e \"Indeterminado\" |\n| n          | Número de ocurrencias del nombre                                         |\n| proporcion | proporción del nombre respecto del total de inscripciones del año        |\n:::\n\n## Cargar datos\n\nPara comenzar, se debe instalar y luego cargar el paquete `guaguas`, el cual contiene el conjunto de datos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargamos el paquete\nif (!require(\"guaguas\")) install.packages(\"guaguas\")\nlibrary(guaguas)\n```\n:::\n\n\n\nLuego, se asigna ese conjunto de datos a un objeto llamado `datos`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Notar que el paquete guaguas tiene una función llamada \"guaguas\".\ndatos <- guaguas\n```\n:::\n\n\n\nSe puede visualizar usando la función `View()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(datos)\n```\n:::\n\n\n\n![](images/dataframe.png){width=\"300\" height=\"auto\" fig-align=\"center\"}\n\nA continuación se presentan algunas funciones con las que cuenta `R` para inspeccionar los datos.\n\n## Funciones: Estructura (1)\n\n-   `str()`: muestra la estructura de los datos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(datos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [858,782 × 5] (S3: tbl_df/tbl/data.frame)\n $ anio      : num [1:858782] 1920 1920 1920 1920 1920 1920 1920 1920 1920 1920 ...\n $ nombre    : chr [1:858782] \"María\" \"José\" \"Juan\" \"Luis\" ...\n $ sexo      : chr [1:858782] \"F\" \"M\" \"M\" \"M\" ...\n $ n         : num [1:858782] 2130 984 636 631 426 340 326 289 277 269 ...\n $ proporcion: num [1:858782] 0.1045 0.0483 0.0312 0.031 0.0209 ...\n - attr(*, \"spec\")=List of 3\n  ..$ cols   :List of 5\n  .. ..$ anio      : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ nombre    : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ sexo      : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ n         : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ proporcion: list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  ..$ default: list()\n  .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\"\n  ..$ delim  : chr \",\"\n  ..- attr(*, \"class\")= chr \"col_spec\"\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\n\n## Funciones: Estructura (2)\n\n-   `dim()`: indica las dimensiones de un objeto. En este caso, el número de filas y columnas.\n\n-   `nrow()`: indica el número de filas.\n\n-   `ncol()`: indica el número de columnas.\n\n-   `names()`: entrega o define el nombre de las columnas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(datos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 858782      5\n```\n:::\n\n```{.r .cell-code}\nnrow(datos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 858782\n```\n:::\n\n```{.r .cell-code}\nncol(datos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nnames(datos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"anio\"       \"nombre\"     \"sexo\"       \"n\"          \"proporcion\"\n```\n:::\n:::\n\n\n\n## Funciones: Consultar (1)\n\n-   `head(x, n =)`: muestra las primeras `n` filas del objeto `x`.\n\n-   `tail(x, n =)`: muestra las primeras `n` filas del objeto `x`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(datos, n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n   anio nombre sexo      n proporcion\n  <dbl> <chr>  <chr> <dbl>      <dbl>\n1  1920 María  F      2130     0.104 \n2  1920 José   M       984     0.0483\n3  1920 Juan   M       636     0.0312\n4  1920 Luis   M       631     0.0310\n```\n:::\n\n```{.r .cell-code}\ntail(datos, n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n   anio nombre sexo      n proporcion\n  <dbl> <chr>  <chr> <dbl>      <dbl>\n1  2021 Zuri   F         1 0.00000562\n2  2021 Zurick F         1 0.00000562\n3  2021 Zury   F         1 0.00000562\n4  2021 Zyhara F         1 0.00000562\n```\n:::\n:::\n\n\n\n## Funciones: Resumen (1)\n\n-   `summary()`: entrega estadísticos de resumen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(datos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      anio         nombre              sexo                 n           \n Min.   :1920   Length:858782      Length:858782      Min.   :    1.00  \n 1st Qu.:1960   Class :character   Class :character   1st Qu.:    1.00  \n Median :1985   Mode  :character   Mode  :character   Median :    1.00  \n Mean   :1981                                         Mean   :   25.77  \n 3rd Qu.:2004                                         3rd Qu.:    3.00  \n Max.   :2021                                         Max.   :21448.00  \n   proporcion       \n Min.   :3.060e-06  \n 1st Qu.:3.790e-06  \n Median :5.130e-06  \n Mean   :1.188e-04  \n 3rd Qu.:1.437e-05  \n Max.   :1.045e-01  \n```\n:::\n:::\n\n\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n:::{.center-xy}\n:::{.large-text}\n<br> III. Tipos de datos <br>\n:::\n:::\n\n## Tipos de datos\n\nComo revisamos en la clase anterior, `R` cuenta con una serie de tipos de datos definidos de antemano.\n\n::: mini-text\n| **Tipo**         | **Descripción**                                        | **Ejemplo**                                                                                                            |\n|-----------------|---------------------|---------------------------------------|\n| `integer`        | Números enteros                                        | -1, 0, 1                                                                                                               |\n| `numeric`        | Números reales                                         | -0.5, 1/2, 1                                                                                                           |\n| `character`      | Texto/String                                           | \"Erwin\", \"Armin\", \"Sasha\", \"Titanes\"                                                                                   |\n| `factor`         | Datos categóricos                                      | \"Trabajo Social \\[1\\]\", \"Otra carrera \\[2\\]\"                                                                           |\n| `haven_labelled` | Valores numéricos con etiquetas asociadas              | 1 = \"Muy en desacuerdo\"; 2 = \"En desacuerdo\"; 3 \"Ni de acuerdo ni en desacuerdo\"; 4 = \"De acuerdo\"; 5 \"Muy de acuerdo\" |\n| `logical`        | Verdadero o falso                                      | \"TRUE\", \"FALSE\"                                                                                                        |\n| `NA`             | Valores perdidos                                       | NA                                                                                                                     |\n| `NULL`           | Objetos nulos. Es devuelto por expresiones o funciones | NULL                                                                                                                   |\n:::\n\n## Enteros y numéricos (1)\n\nRepresentan números enteros, sin parte decimal. Pueden ser usados en operaciones matemáticas y en el contexto de bases de datos, contienen información para las observaciones.\n\nEn este caso, seleccionaremos la columna \"n\" que es de tipo numérica.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos[, \"n\"]  # Seleccionamos todos los casos para la columna \"n\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 858,782 × 1\n       n\n   <dbl>\n 1  2130\n 2   984\n 3   636\n 4   631\n 5   426\n 6   340\n 7   326\n 8   289\n 9   277\n10   269\n# ℹ 858,772 more rows\n```\n:::\n:::\n\n\n\n\n\n## Enteros y numéricos (2)\n\nY podríamos ordenar las filas de esa columna de manera descendente y agregarle más columnas para tener información de contexto.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos[order(datos$n, decreasing = TRUE), c(\"anio\", \"nombre\", \"n\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 858,782 × 3\n    anio nombre     n\n   <dbl> <chr>  <dbl>\n 1  1955 María  21448\n 2  1956 María  21013\n 3  1965 María  20382\n 4  1954 María  20172\n 5  1957 María  20154\n 6  1962 María  19862\n 7  1959 María  19701\n 8  1958 María  19593\n 9  1960 María  19581\n10  1953 María  19566\n# ℹ 858,772 more rows\n```\n:::\n:::\n\n\n\n## Enteros y numéricos (3)\n\nAl aplicar operaciones matemáticas se debe tener cuidado con los datos perdidos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmis_numeros <- c(7, 25, 33, 26)\nmean(mis_numeros)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22.75\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmis_numeros_na <- c(7, 25, 33, 26, NA)\nmean(mis_numeros_na)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\nLa media no se puede calcular si hay valores perdidos. En estos casos se debe excluir los valores perdidos usando la opción `na.rm` con valor `TRUE`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nmis_numeros_na <- c(7, 25, 33, 26, NA)\nmean(mis_numeros_na, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22.75\n```\n:::\n:::\n\n\n\n## Strings o texto (1)\n\nCorresponden a cadenas de texto o también denominadas secuencias de caracteres. Se reconocen porque están encerradas en comillas simples `' '` o dobles `\" \"`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_texto <- \"Bienvenido/a. Su nombre es:\"\n```\n:::\n\n\n\nCon la función `paste()` se pueden concatenar strings. Además, cuenta con el argumento `sep` que indica el separador que tendrá el texto. Por defecto es un espacio vacío.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(mi_texto, \"Julio Cesar\", sep = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Bienvenido/a. Su nombre es: Julio Cesar\"\n```\n:::\n:::\n\n\n\nY podemos usar cualquier separador.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(mi_texto, \"Julio Cesar\", sep = \"------>\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Bienvenido/a. Su nombre es:------>Julio Cesar\"\n```\n:::\n:::\n\n\n\nY se pueden concatenar más de dos strings a la vez. En estos casos con el argumento `collapse()` para separar los resultados.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(mi_texto, c(\"Julio Cesar\", \"Cesar Augusto\", \"Calígula\"), collapse = \"/---/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Bienvenido/a. Su nombre es: Julio Cesar/---/Bienvenido/a. Su nombre es: Cesar Augusto/---/Bienvenido/a. Su nombre es: Calígula\"\n```\n:::\n:::\n\n\n\n## Strings o texto (2)\n\nTambién está la función `paste0()`. Esta no tiene como argumento `sep` y siempre concatenará sin espacios.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_texto_2 <- \"30/08/\"\npaste0(mi_texto_2, \"2023\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"30/08/2023\"\n```\n:::\n:::\n\n\n\n## Strings o texto (3)\n\nOtras funciones útiles son:\n\n-   `toupper(x)`: convierte el vector a mayúsculas.\n\n-   `tolower(x)`: convierte el vector a minúsculas.\n\n-   `nchar(x)`: retorna el número de caracteres del string.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_texto_3 <- \"Hola Mundo\"\ntoupper(mi_texto_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"HOLA MUNDO\"\n```\n:::\n\n```{.r .cell-code}\ntolower(mi_texto_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hola mundo\"\n```\n:::\n\n```{.r .cell-code}\nnchar(mi_texto_3) # Cuenta 10 porque espacio también es un caracter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\nAdemás R cuenta con otras funciones base para strings tales como `grep()` `gsub()`.\n\n## Factores (1)\n\nEste es un tipo de dato específico de R para datos categóricos. Los factores toman un número acotado de valores distintos, los cuales son llamados `niveles` o `levels`.\n\nEjemplo[^1]:\n\n[^1]: Ejemplo adaptado de R For Data Science, segunda edición.\n\n-   Suponga que tiene una variable con valores para cuatro meses. Usar esta variable como un string tiene al menos dos problemas:\n    -   Los valores válidos están restringidos a 12 categorías. Solo pueden ingresarse esos valores.\n    -   Si quiero ordenarlo, lo hará alfabéticamente.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(\"Enero\", \"Febrero\", \"Marzo\", \"Abril\")\nx2 <- c(\"Enero\", \"Febrerooo\", \"Marzooo\", \"Abril\")\nsort(x1) # No ordena como quisiéramos, porque es un string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Abril\"   \"Enero\"   \"Febrero\" \"Marzo\"  \n```\n:::\n:::\n\n\n\n## Factores (2)\n\nLos factores buscan solucionar los problemas antes mencionados. Para crear un factor lo primero que debe hacerse es definir un vector de valores válidos, los que se asignarán al factor.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeses_levels <- c(\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n)\n\nfactor_x1 <- factor(x1, levels = meses_levels)\nsort(factor_x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Enero   Febrero Marzo   Abril  \n12 Levels: Enero Febrero Marzo Abril Mayo Junio Julio Agosto ... Diciembre\n```\n:::\n:::\n\n\n\nY cualquier valor que no sea parte de los `levels` del factor se convertirá en `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeses_levels <- c(\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n)\nfactor_x2 <- factor(x2, levels = meses_levels)\nfactor_x2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Enero <NA>  <NA>  Abril\n12 Levels: Enero Febrero Marzo Abril Mayo Junio Julio Agosto ... Diciembre\n```\n:::\n:::\n\n\n\n## Factores (3)\n\nLos factores nativos de R tienen algunos inconvenientes:\n\n-   Convierten directamente en `NA` los valores sin emitir alertas. Esto puede ser riesgoso.\n-   Si no se le entregan los `levels` al factor, estos serán ordenados automáticamente de manera alfabética. Sin embargo, esto no es deseable, porque no todos los computadores ordenan los strings de la misma forma.\n\nPor estas razones en el curso preferiremos paquetes que los implementan de otro modo.\n\n##  {background-color=\"rgb(25,25,25)\"}\n\n:::{.center-xy}\n:::{.large-text}\n<br> ¡Gracias! <br> <https://sirojasv.github.io/tsm_web/>\n:::\n:::\n",
    "supporting": [
      "clase_2_presentación_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}